#line 2 "Source\\SavvyScannerGLSL.cpp"

#line 4 "Source\\SavvyScannerGLSL.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer glslFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *glslalloc (yy_size_t  );
void *glslrealloc (void *,yy_size_t  );
void glslfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include"SavvyScannerGLSL.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 417
#define YY_END_OF_BUFFER 418
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1872] =
    {   0,
        0,    0,  418,  416,  415,  414,  145,  398,  167,  162,
      177,  178,  175,  172,  169,  173,  168,  176,  406,  406,
      170,  171,  166,  174,  165,  405,  405,  181,  182,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  179,
      164,  180,  163,  415,  147,    0,    0,    0,    0,    0,
        0,    0,  152,  155,  158,  153,  148,  150,  149,  151,
        3,    0,  154,  407,  406,  412,  161,  157,  146,  156,
      160,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  189,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      183,  405,  405,  357,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  159,    0,    0,    0,    0,   11,    0,    0,    0,
        0,    1,  407,    0,  408,  412,  413,  405,  405,  192,
      405,  195,  196,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  219,

      405,  405,  405,  405,  405,  405,  231,  405,  405,  405,
      405,  237,  405,  405,  405,  405,  405,  245,  188,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,   18,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      279,  405,  405,  282,  405,  405,  288,  289,  290,  405,
      405,  405,  298,  356,  405,  308,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  315,  405,  405,  405,  405,
      405,  405,  320,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,    0,    0,    0,    0,    0,   11,   11,   11,    0,

        0,    0,    0,    0,    0,  411,  413,  405,  405,  405,
      193,  197,  199,  405,  405,  405,  405,  405,   17,  405,
      405,  405,  187,  217,  405,  405,  405,  405,  397,  220,
      405,  224,  227,  405,  405,  405,  405,  405,  405,  405,
      184,  405,  238,  405,  405,  405,  141,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  280,  140,   37,   43,   49,  405,  405,
      405,  291,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  314,  316,  405,
      318,  405,  405,  405,  319,  405,  405,  321,  405,  405,
      405,   15,  405,  405,  405,   19,  405,  405,  405,  405,
      405,  405,   31,   32,   33,  405,  144,  405,  405,  405,
        0,   14,    9,    0,    0,   11,   11,   12,    0,    0,
        0,  410,  409,  405,  405,  405,  405,  194,  198,  200,
      405,  405,  405,  405,  405,  186,  405,   22,   23,   24,
      218,  405,  131,  405,  221,  405,  405,  405,  405,  405,
      405,  405,  405,   40,   46,   52,  405,   34,   35,   36,
      236,  405,   16,  405,  405,   20,  244,  246,  247,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  138,
      405,  405,  405,  405,  405,  405,  405,  405,  273,  274,
       25,   26,   27,  405,  275,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  292,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      312,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  344,  405,  405,  405,  405,  405,  405,  405,
      405,   28,   29,   30,  405,  405,  190,  405,    0,   14,
        9,    7,   10,    5,   11,   12,    0,    8,    0,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  401,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,   21,  405,  405,  405,  405,  248,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  358,  276,  405,  405,   37,
       38,   39,   44,   43,   45,   50,   51,   49,  405,  405,
      405,  293,  294,  295,  296,  405,  405,  405,  405,  405,
      405,  405,  405,  393,  405,  405,  405,  405,  405,  404,

      405,  405,  394,  142,  392,  395,  396,   55,  185,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,    4,    7,   10,    5,    6,   13,    8,
        0,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  212,  391,  405,  405,  405,  405,  405,  405,
      405,  405,  222,  405,  400,  405,   40,   41,   42,   47,
       46,   48,   53,   54,   52,  405,  240,  241,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,   57,

       58,   59,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  271,  405,  405,  405,  405,  139,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  309,  405,
      310,  311,  405,  405,  405,  405,  405,  324,  405,  405,
      405,  405,  405,  405,  405,  405,  405,   56,  405,  405,
      405,  405,  405,  405,  399,  405,  405,    4,    6,   13,
        0,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  210,  405,  405,  213,  405,  137,  191,  405,  226,
      405,  229,  405,  230,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  368,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,   63,   64,   65,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  277,  390,  405,  405,  405,
      405,  299,  405,  405,  405,  405,  405,  134,  135,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,   60,   61,   62,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  136,  405,
        0,  405,  405,  405,  405,  201,  202,  405,  405,  405,
      208,  209,  211,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,   84,  405,  405,
      405,   66,  262,  405,  264,  405,  405,  405,  405,  132,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      297,  405,  405,  405,  405,  305,  313,   90,   91,   92,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  343,  345,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  133,    0,  405,  233,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  225,  228,  405,  405,  405,
      405,  250,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,   86,  405,  405,   67,  405,  405,  405,  405,  405,
      405,  405,  405,  265,  405,  405,  405,  405,   93,   94,
       95,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  317,  322,  405,  405,  330,  405,  405,  405,

      405,  405,  405,  405,   85,  405,  405,   68,  405,  405,
      405,  405,  405,  405,   96,   97,   98,  405,  405,  355,
        0,  405,  405,  405,  405,  405,  405,  130,  405,  405,
      405,  223,  239,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      376,  405,  379,  405,  405,  405,  405,  386,  405,  405,
      251,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,   69,  405,   81,  405,  405,  405,  405,  405,  272,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      117,  405,  405,  405,   99,  405,  405,  328,  405,  405,
      333,  405,  405,  342,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  352,  405,  405,  405,  405,
      405,  405,    0,  405,  234,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  249,  405,  405,  361,  362,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  375,
      405,  405,  405,  383,  405,  405,  405,  405,  405,  405,
      405,  405,   71,   83,  405,   72,   75,  405,  405,  405,
      405,  405,  405,  405,  405,  263,  266,  405,  405,  405,
      405,  119,  405,  405,  100,  405,  405,  405,  405,  300,

      405,  302,  405,  304,  405,  307,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,   70,   82,
      405,  405,  347,  405,  405,  405,  405,  405,  405,  405,
      405,  118,  405,  405,  101,    0,  405,  405,  405,  204,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  366,  405,  405,  371,  405,  405,  374,  405,  380,
      405,  405,  405,  405,  405,  405,  405,  405,   74,   77,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  260,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      278,  405,  283,  143,  405,  303,  306,  405,  405,  405,
      405,  102,  405,  114,  405,  405,  405,  325,  405,  405,
      332,  405,  405,  405,  405,  405,   73,   76,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,    0,  405,  405,  203,  405,  405,  207,
      405,  215,  405,  242,  405,  405,  405,  363,  405,  405,
      405,  405,  405,  405,  377,  405,  405,  405,  405,  405,
      388,  405,  405,  405,  405,  405,   87,  254,  255,  405,
      405,  258,  259,  261,   78,  267,  405,  405,  405,  405,
      405,  405,  104,  116,  405,  281,  405,  405,  405,  405,

      301,  105,  405,  108,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  336,  405,  405,  405,  341,  405,
      405,  405,  405,  349,  405,  351,  405,  354,  405,  405,
      405,  103,  115,  405,    0,  405,  405,  405,  405,  214,
      216,  243,  405,  405,  405,  405,  367,  405,  405,  405,
      405,  381,  405,  405,  405,  405,  405,  405,  405,   89,
       80,  405,  405,  405,  405,  405,  107,  110,  405,  405,
      405,  405,  405,  405,  405,  123,  405,  405,  405,  124,
      405,  405,  405,  405,  405,  405,  334,  405,  405,  405,
      340,   88,   79,  346,  405,  350,  353,  106,  109,  405,

      405,    0,  232,  405,  405,  405,    0,    0,  405,  405,
      405,  372,  405,  378,  405,  405,  405,  387,  389,  252,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  120,  405,  111,  405,  323,  405,
      405,  331,  405,  405,  405,  405,  348,  405,  405,    0,
      405,  405,  405,    0,  359,    0,  360,  405,  405,  405,
      405,  382,  384,  385,  405,  405,  405,  405,  405,  405,
      122,  113,  405,  405,  405,  405,  405,  405,  405,  405,
      125,  405,  329,  405,  405,  338,  405,  121,  112,    0,
      235,  405,  405,  405,  405,  405,  373,  253,  405,  405,

      405,  405,  405,  405,  405,  286,  405,  405,  405,  405,
      405,  405,  405,  405,  339,    0,  405,  405,  405,  365,
      405,  256,  257,  405,  269,  270,  405,  285,  287,  405,
      405,  126,  405,  326,  405,  405,    0,  405,  405,  405,
      369,  405,  405,  405,  127,  128,  405,  327,  405,  337,
        0,  405,  405,  364,  405,  268,  405,  405,  335,    2,
      205,  206,  405,  405,  129,  370,  405,  405,  405,  284,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   22,   24,   22,   25,   26,   27,
       28,   29,    1,    1,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   39,   39,
       53,    1,   54,    1,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[86] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1887] =
    {   0,
        0,    0, 2059, 2060,   84, 2060, 2030,   83, 2029,   81,
     2060, 2060, 2028,   78, 2060,   77, 2060,   82,   96,  106,
     2060, 2060,   67, 2027,   68,    0,   31, 2060, 2060,   77,
       85,   97,  113,   66,  118,   34, 1990,  131,  109,  133,
     1983, 1976,   52,  124,  146,  155,  148,   32,   93, 2060,
     2023, 2060, 2060,  135, 2060,  167, 1990,  163, 1988, 1984,
     1974, 1977, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060,
     2041,    0, 2060,  227,  237,  245, 2060, 2060, 2060, 2060,
     2060,    0, 1980, 1984, 1968, 1971, 1973, 1959, 1974,  131,
     1964,  103, 1966, 1975, 1973, 1973, 1958, 1967, 1974,  166,

     1959, 1969,  101, 1953, 1970,   28, 1965, 1950, 1947, 1951,
       73, 1952,  150, 1964, 1946,   76, 1954, 1962,  153, 1954,
        0, 1947,  177,  195,  215, 1954, 1933, 1952,  168,  215,
      199,  139,  206, 1952,  219, 1935, 1951, 1930, 1948,  225,
     1930, 1937, 1948,  220, 1933, 1929,  236, 1937, 1931, 1920,
      235, 1939,  229, 1921,  237,  246, 1936,  245,  240, 1931,
     1930, 2060, 1932,  241, 1933, 1918,  247, 1921, 1933, 1929,
     1944,    0,  306,  319, 2060,  327,    0, 1911,  266,    0,
     1911,    0,    0, 1915, 1914, 1914, 1908, 1921,  300, 1912,
     1922, 1916, 1918, 1915, 1907, 1905, 1912,  245, 1911, 1907,

     1895,  255, 1895, 1907,  294, 1891,    0, 1908, 1906, 1903,
     1906, 1942, 1900, 1885, 1899, 1882,  298,    0,    0, 1898,
     1876, 1895,  338, 1897, 1876, 1888, 1894, 1887, 1881,  324,
      220, 1879, 1877, 1889, 1886, 1873, 1863, 1879, 1866, 1883,
     1919, 1866,  337,    0, 1872, 1865,    0,    0, 1873, 1859,
     1872, 1863, 1896, 1869, 1862,    0, 1863, 1867,  286, 1850,
     1848, 1854, 1851, 1848, 1851, 1856, 1848, 1842,  342, 1845,
     1839, 1839, 1850,  304, 1843,  252, 1852, 1854, 1834, 1841,
     1846, 1850, 1837, 1847, 1845,  371, 1828, 1842, 1844, 1832,
     1823, 1833, 1835, 1835, 1830, 1823,    0, 1832, 1832, 1830,

     1827, 1828, 1814,  376,  384,  394,    0,  267, 1813, 1810,
     1821, 1820, 1819, 1817, 1816, 1815, 1808, 1813,    0, 1810,
     1815,  400,    0,    0, 1803, 1800, 1797, 1807,    0,    0,
     1796,  390,  391, 1809, 1795, 1811, 1810,  408, 1798,  411,
        0, 1797,    0, 1802, 1802,  331,    0, 1786, 1787, 1784,
     1787, 1782,  357, 1783, 1788, 1794, 1784,  378, 1776,  379,
     1795, 1790,  317, 1779, 1773, 1776, 1775, 1783, 1784, 1809,
     1778, 1768, 1767, 1766, 1767, 1776, 1767,  417, 1759, 1763,
     1758, 1784, 1756,    0,    0, 1751, 1750, 1749, 1763, 1750,
     1752,    0, 1764, 1750, 1766, 1749, 1747,  406, 1763, 1748,

     1757, 1760, 1742, 1741, 1754, 1745, 1751,    0,    0, 1735,
        0, 1788, 1787, 1787,    0, 1748, 1747,    0, 1737, 1727,
     1728,    0, 1743, 1768, 1737, 1767, 1763, 1726, 1737, 1723,
     1762,  421,    0,    0,    0, 1728,    0, 1716, 1730, 1729,
     1719,    0,    0, 1726, 1713, 1724, 1724,    0, 1715, 1721,
     1717,  439,  450, 1705, 1719, 1714, 1704,    0,    0,    0,
     1718, 1715, 1705, 1697, 1712,    0, 1698,    0,    0,    0,
        0, 1710,    0, 1700,    0, 1698, 1703, 1696, 1701, 1704,
     1695, 1689, 1692, 1681, 1680, 1679, 1697,    0,    0,    0,
        0, 1686,    0, 1708, 1707, 1722,    0,    0,    0, 1689,

     1687, 1683,  394, 1679, 1681,  370, 1667, 1688, 1677, 1669,
      401, 1679, 1674, 1667, 1667, 1679, 1665, 1677, 1695,    0,
     1675,  458, 1655, 1658, 1661, 1667, 1656, 1662,    0,    0,
        0,    0,    0, 1653,    0, 1664, 1663, 1661,  460,  463,
      466, 1645, 1655, 1642,  473, 1647, 1653, 1643, 1674, 1647,
     1660, 1646, 1645, 1654, 1643, 1642, 1652, 1651, 1644, 1638,
     1672, 1645, 1645, 1640, 1685, 1684, 1683, 1624, 1635, 1662,
     1623, 1624,    0, 1638, 1633, 1628, 1612, 1617, 1623, 1621,
     1617,    0,    0,    0, 1616, 1621,    0, 1614, 1623,    0,
        0,    0,    0,    0, 1621,    0, 1625,    0, 1618, 1606,

     1605, 1609, 1616,  465, 1602, 1612, 1604, 1605,    0, 1602,
     1594, 1613, 1599, 1611, 1597, 1591, 1600, 1604, 1604,  481,
      490,  493,    0, 1588, 1629, 1628, 1594,  419, 1586, 1589,
     1593, 1585, 1596, 1581, 1576, 1580, 1589, 1592,  336, 1589,
     1577, 1581, 1576, 1572, 1568, 1566, 1562, 1573, 1565, 1577,
      503, 1603, 1602, 1601, 1558, 1556, 1555, 1560,  440, 1554,
     1554, 1557, 1570, 1565, 1564,    0,    0, 1567, 1552,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1589, 1549,
     1588,    0,    0,    0,    0, 1547, 1553, 1560, 1542, 1538,
     1546, 1542, 1541,    0, 1536, 1542, 1533, 1532, 1548,    0,

     1528, 1531,    0, 1529,    0,    0,    0,    0,    0, 1542,
     1541, 1530, 1526,  506, 1523, 1522, 1528,  494, 1535, 1521,
     1524, 1525, 1522,    0,    0,    0,    0,    0,    0,    0,
     1526, 1529, 1513, 1523, 1530,  459, 1515, 1505,  476, 1510,
     1512, 1505,    0,    0, 1505, 1520, 1503, 1517, 1502, 1512,
     1496, 1506,    0, 1494,    0, 1500,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1479,    0,    0, 1479, 1481,
     1484, 1512, 1509,  413, 1464, 1482, 1477, 1480,   54,   87,
      152,  185,  295,  346,  428,  432,  452,  452,  504,  469,
      459,  497,  491,  474,  512,  513,  514,  472,  473,  520,

      521,    0,  482,  492,  497,  499,  488,  476,  488,  499,
      512,  494,  494,  490,  492,  497,  499,  499,    0,  514,
      511,  491,  506,  504,  518,  515,  504,  505,    0,  499,
        0,    0,  505,  521,  564,  510,  511,  554,  513,  515,
      556,  558,  559,  517,  524,  528,  543,    0,  534,  549,
      537,  538,  535,  536,    0,  550,  544,    0,    0,    0,
      543,  557,  554,  540,  548,  558,  559,  551,  562,  542,
      553,    0,  550,  560,    0,  591,    0,    0,  552,    0,
      554,    0,  574,    0,  575,  558,  577,  565,  571,  572,
      568,  579,  605,  574,  569,  574,  588,    0,  607,  578,

      574,  598,  617,  586,  576,  592,  583,  594,  576,  586,
      584,  595,  589,  630,  631,    0,  601,  606,  592,  593,
      620,  608,  601,  609,  611,  614,  603,  615,  603,  609,
      609,  624,  606,  610,  665,  652,    0,  619,  615,  631,
      630,    0,  632,  625,  674,  626,  627,    0,    0,  629,
      666,  667,  668,  626,  627,  644,  647,  650,  637,  647,
      636,  634,  655,  652,  633,  684,  685,    0,  655,  660,
      670,  651,  645,  655,  654,  655,  709,  660,    0,  652,
      677,  666,  656,  672,  693,    0,    0,  667,  670,  679,
        0,    0,    0,  674,  665,  676,  686,  687,  688,  680,

      677,  703,  679,  693,  680,  681,  686,  686,  702,  721,
      722,  703,  687,  694,  693,  699,  706,  697,  704,  699,
      706,  733,  702,  696,  737,  703,  708,  723,  707,  708,
      709,  736,  724,  724,  726,  714,  715,  759,  732,  727,
      732,  763,    0,  727,    0,  735,  737,  762,  723,    0,
      726,  767,  768,  769,  727,  728,  733,  735,  734,  733,
        0,  733,  750,  732,  793,  794,    0,  786,  788,    0,
      756,  762,  749,  758,  747,  767,  765,  764,  756,  767,
      760,  749,    0,    0,  758,  759,  789,  777,  777,  779,
      770,  782,  785,  782,  771,  772,  813,  814,  815,  773,

      774,  773,    0,  785,  803,    0,  777,  782,  809,  782,
      802,  784,  785,  787,  785,    0,    0,  788,  805,  795,
      792,    0,  792,  793,  796,  795,  813,  803,  804,  814,
      811,  799,  810,  842,  806,  810,  800,  813,  806,  851,
      829,  816,  814,  828,  856,  815,  815,  823,  813,  821,
      822,  866,  839,  838,  869,  844,  845,  829,  828,  846,
      832,  833,  847,    0,  848,  842,  850,  836,  882,  883,
        0,  853,  858,  840,  876,  854,  855,  862,  902,  904,
      844,  846,  847,  848,  855,  867,  858,  885,  873,  871,
      874,  876,    0,  894,  875,  880,  897,  867,  877,  870,

      873,  885,  873,  874,  918,  891,  890,  921,  917,  893,
      887,  936,  888,  889,  928,  929,    0,  899,  904,    0,
      958,  903,  904,  901,  888,  907,  899,    0,  896,  911,
      912,    0,    0,  935,  914,  920,  921,  919,  916,  916,
      904,  905,  945,  915,  916,  927,  915,  914,  917,  931,
        0,  932,    0,  919,  920,  936,  929,    0,  959,  927,
      965,  969,  945,  946,  930,  929,  932,  933,  927,  928,
      936,    0,  980,    0,  938,  939,  956,  946,  987,    0,
      945,  946,  973,  962,  963,  965,  970,  951,  968,  952,
      955,  952, 1010, 1016, 1011, 1018, 1013,  965,  983,  967,

     1011,  984,  987,  984, 1015,  985,  987, 1005,  988,  990,
     1015,  972,  986,    0,  998, 1000,  984,  984,  987,  988,
      996, 1005, 1005,  987, 1048, 1049,  998,  999, 1026, 1014,
     1014, 1016, 1030, 1005,    0, 1011, 1024, 1008, 1020, 1027,
     1011, 1012, 1017, 1023,    0, 1019, 1020,    0,    0, 1021,
     1021, 1022, 1060, 1025, 1037, 1022, 1027, 1034, 1040,    0,
     1062, 1035, 1038,    0, 1065, 1035, 1067, 1034, 1051, 1029,
     1030, 1038,    0,    0, 1039,    0,    0, 1057, 1056, 1046,
     1038, 1062, 1046, 1050, 1065,    0,    0, 1066, 1048, 1051,
     1054, 1098, 1071, 1070, 1101, 1065, 1066, 1061, 1075,    0,

     1116,    0, 1114,    0, 1115,    0, 1083, 1081, 1085, 1069,
     1068, 1085, 1072, 1073, 1084, 1087, 1076, 1089, 1090, 1077,
     1080, 1084, 1094, 1116, 1097, 1078, 1079, 1087,    0,    0,
     1088, 1092,    0, 1144, 1146, 1086, 1087, 1088, 1089, 1096,
     1097, 1141, 1114, 1113, 1144, 1115, 1101, 1113, 1107, 1146,
     1120, 1123, 1107, 1109, 1110, 1117, 1129, 1130, 1127, 1132,
     1133,    0, 1154, 1137,    0, 1118, 1137,    0, 1163, 1159,
     1123, 1130, 1124, 1142, 1169, 1139, 1128, 1132,    0,    0,
     1150, 1151, 1128, 1150, 1151, 1143, 1154, 1134, 1145,    0,
     1142, 1136, 1142, 1186, 1163, 1164, 1148, 1147, 1150, 1151,

        0, 1150, 1196,    0, 1209,    0,    0, 1150, 1161, 1152,
     1162, 1189, 1167,    0, 1165, 1183, 1166, 1198, 1181, 1170,
        0, 1189, 1187, 1186, 1188, 1175,    0,    0, 1194, 1195,
     1196, 1174, 1231, 1237, 1232, 1239, 1235, 1204, 1205, 1189,
     1188, 1191, 1192, 1198, 1207, 1193,    0, 1209, 1201,    0,
     1196,    0, 1212,    0, 1198, 1214, 1215,    0, 1220, 1221,
     1245, 1204, 1209, 1221, 1244, 1214, 1220, 1216, 1211, 1227,
        0, 1207, 1233, 1217, 1211, 1212,    0,    0,    0, 1222,
     1231,    0,    0,    0,    0,    0, 1235, 1235, 1241, 1218,
     1219, 1227,    0,    0, 1228,    0, 1227, 1227, 1236, 1242,

        0, 1259, 1229, 1261, 1253, 1247, 1233, 1256, 1254, 1254,
     1254, 1242, 1257, 1259, 1276, 1246, 1244, 1263,    0, 1243,
     1244, 1250, 1306,    0, 1304,    0, 1305,    0, 1249, 1250,
     1258,    0,    0, 1259, 1277, 1255, 1271, 1278, 1279,    0,
        0,    0, 1285, 1286, 1265, 1266,    0, 1278, 1269, 1270,
     1276,    0, 1276, 1287, 1288, 1270, 1290, 1284, 1288,    0,
        0, 1306, 1298, 1286, 1295, 1289,    0,    0, 1302, 1303,
     1290, 1300, 1306, 1307, 1301,    0, 1302, 1286, 1311,    0,
     1288, 1299, 1295, 1310, 1312, 1298, 1331, 1314, 1316, 1317,
        0,    0,    0,    0, 1359,    0,    0,    0,    0, 1323,

     1324, 1312,    0, 1305, 1310, 1311, 1368, 1376, 1337, 1338,
     1333,    0, 1366,    0, 1336, 1333, 1334,    0,    0,    0,
     1348, 1331, 1341, 1336, 1338, 1342, 1334, 1335, 1348, 1356,
     1356, 1346, 1364, 1365,    0, 1364, 1377, 1347,    0, 1352,
     1352,    0, 1367, 1368, 1356, 1365,    0, 1353, 1354, 1360,
     1376, 1377, 1378, 1422, 2060, 1430, 2060, 1385, 1386, 1388,
     1389,    0,    0,    0, 1386, 1404, 1399, 1389, 1403, 1397,
        0,    0, 1401, 1406, 1407, 1408, 1410, 1411, 1401, 1409,
        0, 1413,    0, 1413, 1401,    0, 1403,    0,    0, 1414,
        0, 1411, 1412, 1412, 1413, 1445,    0,    0, 1414, 1426,

     1417, 1413, 1429, 1432, 1418,    0, 1433, 1423, 1424, 1417,
     1440, 1422, 1424, 1439,    0, 1442, 1441, 1442, 1465,    0,
     1471,    0,    0, 1441,    0,    0, 1474,    0,    0, 1429,
     1430,    0, 1450, 1436, 1451, 1437, 1488, 1445, 1446, 1483,
        0, 1458, 1459, 1449,    0,    0, 1450,    0, 1446,    0,
     1518, 1448, 1449,    0, 1465,    0, 1450, 1449,    0, 2060,
        0,    0, 1449, 1460,    0,    0, 1455, 1471, 1459,    0,
     2060, 1530, 1540, 1531, 1543, 1532, 1546, 1549, 1552, 1555,
     1558, 1561, 1564, 1567, 1570, 1573
    } ;

static yyconst flex_int16_t yy_def[1887] =
    {   0,
     1871,    1, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1872, 1872, 1871, 1871, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1873, 1871, 1871, 1871, 1874, 1871, 1871, 1871, 1871,
     1871, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1871, 1871, 1871, 1871, 1871, 1875, 1871, 1871, 1871,
     1871, 1873, 1871, 1871, 1871, 1871, 1876, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1871, 1871, 1871, 1871, 1871, 1875, 1875, 1875, 1871,

     1871, 1871, 1871, 1871, 1871, 1871, 1876, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1871, 1877, 1878, 1871, 1871, 1875, 1875, 1879, 1871, 1871,
     1871, 1871, 1871, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1871, 1877,
     1878, 1880, 1881, 1882, 1875, 1879, 1871, 1883, 1871, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1884, 1880, 1881, 1882, 1885, 1886, 1883,
     1871, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1884, 1885, 1886,
     1871, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1871, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1871, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1871, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1871, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1871, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1871, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1871, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1871, 1872, 1872, 1872, 1872, 1871, 1871, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1871,
     1872, 1872, 1872, 1871, 1871, 1871, 1871, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1871,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1871, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1871, 1872, 1872, 1872,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
     1871, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1871,
     1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872, 1872,
        0, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871
    } ;

static yyconst flex_int16_t yy_nxt[2146] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   21,   22,   23,   24,   25,   26,
       26,   26,   26,   27,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   28,   29,   26,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   26,   26,   39,   40,   41,   42,
       43,   26,   44,   45,   46,   47,   48,   49,   26,   26,
       26,   50,   51,   52,   53,   54,   56,   54,   64,   67,
       69,  158,   71,   77,   78,   80,   81,   72,   83,   84,

      118,  159,  207,  208,   70,   68,  119,  137,   65,   73,
       74,  897,   75,   75,   75,   75,   75,   75,   75,   75,
       74,  138,   75,   75,   75,   75,   75,   75,   75,   75,
      213,  220,  108,   85,   86,  221,   54,  109,   54,  214,
       91,   57,   58,   87,  110,   88,   59,  102,   92,   60,
       89,   90,   97,   61,   93,  160,   98,   94,   62,  898,
       95,   96,  203,   99,  127,  161,  100,  128,  129,  101,
       56,  188,  103,  111,   76,  204,  104,  189,  130,  139,
      105,  112,  106,  140,  113,  114,  185,  115,  131,  107,
      116,  121,  132,  141,  122,  117,  133,  245,  123,  124,

      186,  142,  134,  152,  125,  216,  246,  126,  143,  144,
      149,  153,  224,  145,  150,  154,  155,  146,  899,  217,
      147,  156,  225,  148,  157,   57,   58,  151,  197,  164,
       59,  165,  228,   60,  198,  166,  238,   61,  199,  200,
      900,  239,   62,  173,  173,  173,  173,  173,  173,  173,
      173,   74,  229,   75,   75,   75,   75,   75,   75,   75,
       75,  176,  176,  176,  176,  176,  176,  176,  176,  230,
      232,  231,  240,  243,  247,  373,  241,  244,  233,  374,
      258,  265,  250,  234,  248,  259,  174,  175,  266,  251,
      275,  252,  242,  253,  269,  270,  278,  279,  260,  261,

      281,  283,  286,  288,  293,  298,  289,  282,  271,  309,
      276,  422,  310,  454,  294,  299,  455,  287,  327,  328,
      423,  284,  173,  173,  173,  173,  173,  173,  173,  173,
      304,  317,  305,  332,  333,  306,  306,  306,  306,  306,
      306,  306,  306,  176,  176,  176,  176,  176,  176,  176,
      176,  336,  401,  348,  371,  386,  387,  388,  402,  412,
      318,  413,  414,  419,  901,  174,  175,  349,  337,  353,
      494,  495,  354,  355,  356,  357,  515,  358,  420,  359,
      516,  360,  782,  372,  361,  362,  783,  363,  364,  433,
      434,  435,  452,  452,  452,  452,  452,  452,  452,  452,

      453,  453,  453,  453,  453,  453,  453,  453,  902,  389,
      306,  306,  306,  306,  306,  306,  306,  306,  468,  469,
      470,  476,  478,  501,  477,  479,  484,  485,  486,  488,
      489,  490,  502,  507,  510,  531,  532,  533,  550,  582,
      583,  584,  551,  635,  891,  892,  636,  508,  511,  631,
      770,  512,  552,  771,  553,  452,  452,  452,  452,  452,
      452,  452,  452,  632,  641,  554,  453,  453,  453,  453,
      453,  453,  453,  453,  642,  652,  653,  654,  670,  671,
      672,  673,  674,  675,  676,  677,  678,  655,  656,  657,
      682,  683,  684,  685,  736,  807,  737,  658,  738,  757,

      758,  759,  903,  808,  659,  739,  904,  740,  760,  761,
      762,  763,  764,  765,  809,  905,  741,  866,  906,  742,
      795,  796,  797,  841,  842,  843,  849,  867,  909,  910,
      850,  870,  911,  798,  799,  907,  844,  845,  912,  871,
      851,  913,  852,  908,  914,  915,  916,  917,  918,  919,
      920,  923,  924,  925,  926,  927,  928,  929,  930,  931,
      932,  921,  933,  934,  935,  936,  922,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
      950,  951,  952,  953,  956,  957,  964,  965,  966,  958,
      967,  968,  969,  959,  954,  955,  960,  961,  962,  970,

      963,  971,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  982,  983,  984,  985,  986,  987,  988,  990,
      991,  992,  993,  994,  995,  998,  989,  999,  996, 1000,
     1001, 1002, 1003, 1004, 1005, 1006,  997, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
     1031, 1034, 1035, 1019, 1036, 1037, 1038, 1039, 1040, 1041,
     1042, 1032, 1043, 1044, 1045, 1046, 1033, 1047, 1048, 1049,
     1050, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1061,
     1062, 1063, 1064, 1065, 1066, 1055, 1056, 1067, 1068, 1069,

     1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080,
     1081, 1083, 1084, 1085, 1086, 1089, 1090, 1091, 1082, 1092,
     1093, 1094, 1076, 1095, 1096, 1087, 1097, 1098, 1099, 1102,
     1088, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1100,
     1101, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
     1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
     1140, 1143, 1144, 1141, 1145, 1146, 1142, 1147, 1148, 1149,
     1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
     1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,

     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1183, 1182, 1184, 1185, 1191, 1187, 1192, 1193,
     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1188, 1202,
     1203, 1204, 1186, 1189, 1190, 1205, 1206, 1207, 1208, 1209,
     1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
     1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
     1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,

     1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
     1280, 1281, 1282, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
     1292, 1293, 1294, 1283, 1295, 1296, 1297, 1298, 1284, 1299,
     1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
     1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
     1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1331,
     1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1329,
     1341, 1342, 1343, 1345, 1330, 1346, 1347, 1348, 1349, 1350,
     1351, 1352, 1353, 1344, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,

     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1385, 1380, 1386, 1381, 1387, 1388, 1389, 1390, 1391, 1392,
     1382, 1393, 1383, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
     1401, 1384, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1413, 1414, 1416, 1417, 1418, 1419, 1420,
     1421, 1424, 1425, 1426, 1422, 1427, 1428, 1423, 1429, 1430,
     1431, 1415, 1432, 1433, 1434, 1435, 1436, 1438, 1437, 1439,
     1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
     1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,

     1470, 1471, 1472, 1474, 1475, 1477, 1478, 1473, 1479, 1480,
     1481, 1482, 1483, 1476, 1484, 1486, 1487, 1488, 1490, 1491,
     1492, 1493, 1494, 1495, 1485, 1489, 1496, 1497, 1498, 1499,
     1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
     1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
     1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
     1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
     1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1550,
     1551, 1552, 1553, 1549, 1554, 1555, 1556, 1557, 1558, 1559,
     1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569,

     1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1590, 1591,
     1592, 1593, 1594, 1595, 1596, 1597, 1598, 1601, 1588, 1602,
     1603, 1604, 1589, 1599, 1605, 1606, 1607, 1608, 1609, 1610,
     1611, 1612, 1600, 1613, 1614, 1615, 1616, 1617, 1619, 1620,
     1621, 1622, 1623, 1624, 1625, 1626, 1627, 1618, 1628, 1629,
     1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
     1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
     1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
     1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,

     1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
     1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
     1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
     1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
     1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
     1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
     1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
     1750, 1751, 1752, 1753, 1754, 1754, 1754, 1754, 1754, 1754,
     1754, 1754, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756,

     1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
     1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
     1778, 1755, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1757,
     1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1794, 1795, 1796, 1797, 1798, 1799,
     1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
     1810, 1811, 1812, 1813, 1814, 1755, 1815, 1816, 1817, 1818,
     1819, 1820, 1821, 1757, 1822, 1823, 1824, 1825, 1826, 1827,
     1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,

     1838, 1839, 1840, 1841, 1843, 1844, 1845, 1846, 1847, 1848,
     1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
     1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,
     1869, 1870,   82,  177,  307,  896,  895,  894,  893, 1842,
      172,  890,  172,  297,  889,  297,  590,  888,  590,  591,
      887,  591,  596,  886,  596,  725,  885,  725,  726,  884,
      726,  727,  883,  727,  730,  882,  730,  858,  881,  858,
      859,  880,  859,  860,  879,  860,  878,  877,  876,  875,
      874,  873,  872,  869,  868,  865,  864,  863,  862,  861,
      857,  856,  855,  854,  853,  848,  847,  846,  840,  839,

      838,  837,  836,  835,  834,  833,  832,  831,  830,  829,
      828,  827,  826,  825,  824,  823,  822,  821,  820,  819,
      818,  817,  816,  815,  814,  813,  812,  811,  810,  806,
      805,  804,  803,  802,  801,  800,  794,  793,  792,  791,
      790,  789,  788,  787,  786,  785,  784,  781,  780,  779,
      778,  777,  776,  775,  774,  773,  772,  769,  768,  767,
      766,  756,  755,  754,  753,  752,  751,  750,  749,  748,
      747,  746,  745,  744,  743,  735,  734,  733,  732,  731,
      729,  728,  724,  723,  722,  721,  720,  719,  718,  717,
      716,  715,  714,  713,  712,  711,  710,  709,  708,  707,

      706,  705,  704,  703,  702,  701,  700,  699,  698,  697,
      696,  695,  694,  693,  692,  691,  690,  689,  688,  687,
      686,  681,  680,  679,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  640,  639,  638,  637,  634,  633,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  612,  611,  610,
      609,  608,  607,  606,  605,  604,  603,  602,  601,  600,
      599,  598,  597,  595,  594,  593,  592,  589,  588,  587,
      586,  585,  581,  580,  579,  578,  577,  576,  575,  574,

      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  514,
      513,  509,  506,  505,  504,  503,  500,  499,  498,  497,
      496,  493,  492,  491,  487,  483,  482,  481,  480,  475,
      474,  473,  472,  471,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  438,

      437,  436,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  421,  418,  417,  416,  415,  411,  410,  409,  408,
      407,  406,  405,  404,  403,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  390,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  370,  369,  368,
      367,  366,  365,  352,  351,  350,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  335,  334,  331,  330,
      329,  326,  325,  324,  323,  322,  321,  320,  319,  316,
      315,  314,  313,  312,  311,  308,  303,  302,  301,  300,
      296,  295,  292,  291,  290,  285,  280,  277,  274,  273,

      272,  268,  267,  264,  263,  262,  257,  256,  255,  254,
      249,  237,  236,  235,  227,  226,  223,  222,  219,  218,
      215,  212,  211,  210,  209,  206,  205,  202,  201,  196,
      195,  194,  193,  192,  191,  190,  187,  184,  183,  182,
      181,  180,  179,  178,  171,  170,  169,  168,  167,  163,
      162,  136,  135,  120,   79,   66,   63,   55, 1871,    3,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,

     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871
    } ;

static yyconst flex_int16_t yy_chk[2146] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    8,    5,   10,   14,
       16,   48,   18,   23,   23,   25,   25,   18,   27,   27,

       36,   48,  106,  106,   16,   14,   36,   43,   10,   18,
       19,  779,   19,   19,   19,   19,   19,   19,   19,   19,
       20,   43,   20,   20,   20,   20,   20,   20,   20,   20,
      111,  116,   34,   30,   30,  116,   54,   34,   54,  111,
       31,    8,    8,   30,   34,   30,    8,   33,   31,    8,
       30,   30,   32,    8,   31,   49,   32,   31,    8,  780,
       31,   31,  103,   32,   39,   49,   32,   39,   39,   32,
       56,   92,   33,   35,   19,  103,   33,   92,   39,   44,
       33,   35,   33,   44,   35,   35,   90,   35,   40,   33,
       35,   38,   40,   44,   38,   35,   40,  132,   38,   38,

       90,   45,   40,   47,   38,  113,  132,   38,   45,   45,
       46,   47,  119,   45,   46,   47,   47,   45,  781,  113,
       45,   47,  119,   45,   47,   56,   56,   46,  100,   58,
       56,   58,  123,   56,  100,   58,  129,   56,  100,  100,
      782,  129,   56,   74,   74,   74,   74,   74,   74,   74,
       74,   75,  123,   75,   75,   75,   75,   75,   75,   75,
       75,   76,   76,   76,   76,   76,   76,   76,   76,  124,
      125,  124,  130,  131,  133,  231,  130,  131,  125,  231,
      140,  144,  135,  125,  133,  140,   74,   74,  144,  135,
      151,  135,  130,  135,  147,  147,  153,  153,  140,  140,

      155,  156,  158,  159,  164,  167,  159,  155,  147,  179,
      151,  276,  179,  308,  164,  167,  308,  158,  198,  198,
      276,  156,  173,  173,  173,  173,  173,  173,  173,  173,
      174,  189,  174,  202,  202,  174,  174,  174,  174,  174,
      174,  174,  174,  176,  176,  176,  176,  176,  176,  176,
      176,  205,  259,  217,  230,  243,  243,  243,  259,  269,
      189,  269,  269,  274,  783,  173,  173,  217,  205,  223,
      346,  346,  223,  223,  223,  223,  363,  223,  274,  223,
      363,  223,  639,  230,  223,  223,  639,  223,  223,  286,
      286,  286,  304,  304,  304,  304,  304,  304,  304,  304,

      305,  305,  305,  305,  305,  305,  305,  305,  784,  243,
      306,  306,  306,  306,  306,  306,  306,  306,  322,  322,
      322,  332,  333,  353,  332,  333,  338,  338,  338,  340,
      340,  340,  353,  358,  360,  378,  378,  378,  398,  432,
      432,  432,  398,  506,  774,  774,  506,  358,  360,  503,
      628,  360,  398,  628,  398,  452,  452,  452,  452,  452,
      452,  452,  452,  503,  511,  398,  453,  453,  453,  453,
      453,  453,  453,  453,  511,  522,  522,  522,  539,  539,
      539,  540,  540,  540,  541,  541,  541,  522,  522,  522,
      545,  545,  545,  545,  604,  659,  604,  522,  604,  620,

      620,  620,  785,  659,  522,  604,  786,  604,  621,  621,
      621,  622,  622,  622,  659,  787,  604,  736,  788,  604,
      651,  651,  651,  714,  714,  714,  718,  736,  790,  791,
      718,  739,  792,  651,  651,  789,  714,  714,  793,  739,
      718,  794,  718,  789,  795,  796,  797,  798,  799,  800,
      801,  803,  804,  805,  806,  807,  808,  809,  810,  811,
      812,  801,  813,  814,  815,  816,  801,  817,  818,  820,
      821,  822,  823,  824,  825,  826,  827,  828,  830,  833,
      834,  835,  835,  835,  836,  837,  839,  840,  841,  838,
      842,  843,  844,  838,  835,  835,  838,  838,  838,  845,

      838,  846,  847,  849,  850,  851,  852,  853,  854,  856,
      857,  861,  862,  863,  864,  865,  866,  867,  868,  869,
      870,  871,  873,  874,  876,  879,  868,  881,  876,  883,
      885,  886,  887,  888,  889,  890,  876,  891,  892,  893,
      894,  895,  896,  897,  899,  900,  901,  902,  903,  904,
      905,  906,  907,  908,  909,  910,  911,  912,  913,  914,
      915,  917,  918,  903,  919,  920,  921,  922,  923,  924,
      925,  915,  926,  927,  928,  929,  915,  930,  931,  932,
      933,  934,  935,  935,  935,  936,  938,  939,  940,  941,
      943,  944,  945,  946,  947,  935,  935,  950,  951,  952,

      953,  954,  955,  956,  957,  958,  959,  960,  961,  962,
      963,  964,  965,  966,  967,  969,  970,  971,  963,  972,
      973,  974,  958,  975,  976,  967,  977,  977,  977,  978,
      967,  980,  981,  982,  983,  984,  985,  988,  989,  977,
      977,  990,  994,  995,  996,  997,  998,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
     1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
     1022, 1023, 1024, 1022, 1025, 1026, 1022, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1051, 1052,

     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063,
     1064, 1065, 1066, 1065, 1066, 1068, 1071, 1069, 1072, 1073,
     1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1069, 1082,
     1085, 1086, 1068, 1069, 1069, 1087, 1088, 1089, 1090, 1091,
     1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
     1102, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
     1114, 1115, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126,
     1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
     1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,

     1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167,
     1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1170, 1182, 1183, 1184, 1185, 1170, 1186,
     1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197,
     1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218,
     1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1216,
     1230, 1231, 1234, 1235, 1216, 1236, 1237, 1238, 1239, 1240,
     1241, 1242, 1243, 1234, 1244, 1245, 1246, 1247, 1248, 1249,
     1250, 1252, 1254, 1255, 1256, 1257, 1259, 1260, 1261, 1262,

     1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273,
     1275, 1273, 1276, 1273, 1277, 1278, 1279, 1281, 1282, 1283,
     1273, 1284, 1273, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
     1292, 1273, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
     1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1315, 1311, 1316, 1317, 1311, 1318, 1319,
     1320, 1305, 1321, 1322, 1323, 1324, 1325, 1326, 1325, 1326,
     1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1336, 1337,
     1338, 1339, 1340, 1341, 1342, 1343, 1344, 1346, 1347, 1350,
     1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1361,

     1362, 1363, 1365, 1366, 1367, 1368, 1369, 1365, 1370, 1371,
     1372, 1375, 1378, 1367, 1379, 1380, 1381, 1382, 1383, 1384,
     1385, 1388, 1389, 1390, 1379, 1382, 1391, 1392, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1401, 1403, 1405, 1407, 1408,
     1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
     1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
     1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
     1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451,
     1452, 1453, 1454, 1450, 1455, 1456, 1457, 1458, 1459, 1460,
     1461, 1463, 1464, 1466, 1467, 1469, 1470, 1471, 1472, 1473,

     1474, 1475, 1476, 1477, 1478, 1481, 1482, 1483, 1484, 1485,
     1486, 1487, 1488, 1489, 1491, 1492, 1493, 1494, 1495, 1496,
     1497, 1498, 1499, 1500, 1502, 1503, 1503, 1505, 1494, 1508,
     1509, 1510, 1494, 1503, 1511, 1512, 1513, 1515, 1516, 1517,
     1518, 1519, 1503, 1520, 1522, 1523, 1524, 1525, 1526, 1529,
     1530, 1531, 1532, 1533, 1534, 1535, 1536, 1525, 1537, 1538,
     1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1548, 1549,
     1551, 1553, 1555, 1556, 1557, 1559, 1560, 1561, 1562, 1563,
     1564, 1565, 1566, 1567, 1568, 1569, 1570, 1572, 1573, 1574,
     1575, 1576, 1580, 1581, 1587, 1588, 1589, 1590, 1591, 1592,

     1595, 1597, 1598, 1599, 1600, 1602, 1603, 1604, 1605, 1606,
     1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
     1617, 1618, 1620, 1621, 1622, 1623, 1625, 1627, 1629, 1630,
     1631, 1634, 1635, 1636, 1637, 1638, 1639, 1643, 1644, 1645,
     1646, 1648, 1649, 1650, 1651, 1653, 1654, 1655, 1656, 1657,
     1658, 1659, 1662, 1663, 1664, 1665, 1666, 1669, 1670, 1671,
     1672, 1673, 1674, 1675, 1677, 1678, 1679, 1681, 1682, 1683,
     1684, 1685, 1686, 1687, 1688, 1689, 1690, 1695, 1700, 1701,
     1702, 1704, 1705, 1706, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,

     1709, 1710, 1711, 1713, 1715, 1716, 1717, 1721, 1722, 1723,
     1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
     1734, 1707, 1736, 1737, 1738, 1740, 1741, 1743, 1744, 1708,
     1745, 1746, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1756, 1756, 1756, 1756,
     1756, 1756, 1756, 1756, 1758, 1759, 1760, 1761, 1765, 1766,
     1767, 1768, 1769, 1770, 1773, 1774, 1775, 1776, 1777, 1778,
     1779, 1780, 1782, 1784, 1785, 1754, 1787, 1790, 1792, 1793,
     1794, 1795, 1796, 1756, 1799, 1800, 1801, 1802, 1803, 1804,
     1805, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1816,

     1817, 1818, 1819, 1821, 1824, 1827, 1830, 1831, 1833, 1834,
     1835, 1836, 1837, 1838, 1839, 1840, 1842, 1843, 1844, 1847,
     1849, 1851, 1852, 1853, 1855, 1857, 1858, 1863, 1864, 1867,
     1868, 1869, 1872, 1874, 1876,  778,  777,  776,  775, 1821,
     1873,  773, 1873, 1875,  772, 1875, 1877,  771, 1877, 1878,
      770, 1878, 1879,  769, 1879, 1880,  766, 1880, 1881,  756,
     1881, 1882,  754, 1882, 1883,  752, 1883, 1884,  751, 1884,
     1885,  750, 1885, 1886,  749, 1886,  748,  747,  746,  745,
      742,  741,  740,  738,  737,  735,  734,  733,  732,  731,
      723,  722,  721,  720,  719,  717,  716,  715,  713,  712,

      711,  710,  704,  702,  701,  699,  698,  697,  696,  695,
      693,  692,  691,  690,  689,  688,  687,  686,  681,  680,
      679,  669,  668,  665,  664,  663,  662,  661,  660,  658,
      657,  656,  655,  654,  653,  652,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  638,  637,  636,
      635,  634,  633,  632,  631,  630,  629,  627,  626,  625,
      624,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  608,  607,  606,  605,  603,  602,  601,  600,  599,
      597,  595,  589,  588,  586,  585,  581,  580,  579,  578,
      577,  576,  575,  574,  572,  571,  570,  569,  568,  567,

      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  544,  543,  542,  538,  537,  536,  534,  528,  527,
      526,  525,  524,  523,  521,  519,  518,  517,  516,  515,
      514,  513,  512,  510,  509,  508,  507,  505,  504,  502,
      501,  500,  496,  495,  494,  492,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  476,  474,  472,
      467,  465,  464,  463,  462,  461,  457,  456,  455,  454,
      451,  450,  449,  447,  446,  445,  444,  441,  440,  439,
      438,  436,  431,  430,  429,  428,  427,  426,  425,  424,

      423,  421,  420,  419,  417,  416,  414,  413,  412,  410,
      407,  406,  405,  404,  403,  402,  401,  400,  399,  397,
      396,  395,  394,  393,  391,  390,  389,  388,  387,  386,
      383,  382,  381,  380,  379,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  367,  366,  365,  364,  362,
      361,  359,  357,  356,  355,  354,  352,  351,  350,  349,
      348,  345,  344,  342,  339,  337,  336,  335,  334,  331,
      328,  327,  326,  325,  321,  320,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  303,  302,  301,  300,
      299,  298,  296,  295,  294,  293,  292,  291,  290,  289,

      288,  287,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  275,  273,  272,  271,  270,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  258,  257,  255,  254,  253,
      252,  251,  250,  249,  246,  245,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  232,  229,  228,  227,
      226,  225,  224,  222,  221,  220,  216,  215,  214,  213,
      212,  211,  210,  209,  208,  206,  204,  203,  201,  200,
      199,  197,  196,  195,  194,  193,  192,  191,  190,  188,
      187,  186,  185,  184,  181,  178,  171,  170,  169,  168,
      166,  165,  163,  161,  160,  157,  154,  152,  150,  149,

      148,  146,  145,  143,  142,  141,  139,  138,  137,  136,
      134,  128,  127,  126,  122,  120,  118,  117,  115,  114,
      112,  110,  109,  108,  107,  105,  104,  102,  101,   99,
       98,   97,   96,   95,   94,   93,   91,   89,   88,   87,
       86,   85,   84,   83,   71,   62,   61,   60,   59,   57,
       51,   42,   41,   37,   24,   13,    9,    7,    3, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,

     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1871, 1871, 1871, 1871, 1871
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[418] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "Flex\\ScannerGLSL.l"
#define YY_NO_UNISTD_H 1
/* GLSL scanner */
#line 11 "Flex\\ScannerGLSL.l"
#line 1553 "Source\\SavvyScannerGLSL.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "Flex\\ScannerGLSL.l"


#line 1656 "Source\\SavvyScannerGLSL.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1872 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2060 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 28 "Flex\\ScannerGLSL.l"
/* eat up comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 30 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 32 "Flex\\ScannerGLSL.l"
{ int c1 = 0, c2 = yyinput();
       for(;;) {
         if(c2 == EOF) break;
         if(c1 == '*' && c2 == '/')
           break;
         c1 = c2;
         c2 = yyinput();
       }
     }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 43 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 46 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "Flex\\ScannerGLSL.l"
/* eat up line */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 54 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BOOL_VALUE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 55 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BOOL_VALUE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 56 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 57 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 58 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 59 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 60 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 62 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 63 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 64 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 66 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 67 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 68 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 70 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 71 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 72 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 74 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 75 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 76 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 78 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 79 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 80 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 86 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 87 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 88 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 90 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 91 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 92 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 94 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 95 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 96 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 98 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 99 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 100 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 102 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 103 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 104 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 121 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 122 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 123 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 127 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 134 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 135 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 136 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 137 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 138 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 139 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 140 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 163 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 164 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 165 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 166 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 167 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 168 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 169 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 170 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 171 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 172 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 173 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 174 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 175 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 176 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 177 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 178 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 179 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 180 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 181 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 182 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 183 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 184 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 185 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 186 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 187 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 188 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 189 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 190 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 191 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 192 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 193 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 194 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 195 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 196 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 198 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 199 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 200 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 201 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 202 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 203 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 204 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 205 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 206 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 207 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 208 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 209 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 210 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 211 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 212 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 213 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 214 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 215 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 216 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 218 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 219 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 220 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 221 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 222 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 223 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 224 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 225 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 226 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_INSTRUCTION_END;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 227 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 228 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 229 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 230 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 231 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 232 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPEN_BRACKET;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 233 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CLOSE_BRACKET;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 234 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPEN_BRACE;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 235 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CLOSE_BRACE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 236 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPEN_SQUARE_BRACKET;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 237 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CLOSE_SQUARE_BRACKET;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 238 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_IF_STATEMENT;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 239 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_ELSE_STATEMENT;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 240 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_SWITCH_STATEMENT;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 241 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BREAK_STATEMENT;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 242 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CASE_STATEMENT;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 243 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FOR_STATEMENT;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 244 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DO_STATEMENT;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 245 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_WHILE_STATEMENT;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 246 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CONTINUE_STATEMENT;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 248 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 249 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 250 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 251 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 252 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 253 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 254 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 255 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 256 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 257 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 258 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 259 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 260 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 261 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 262 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 263 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 264 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 265 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 266 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 267 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 268 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 269 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 270 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 271 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 272 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 273 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 274 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 275 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 276 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 277 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 278 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 279 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 280 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 281 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 282 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 283 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 284 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 285 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 286 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 287 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 288 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 289 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 290 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 291 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 292 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 293 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 294 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 295 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 296 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 297 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 298 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 299 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 300 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 301 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 302 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 303 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 304 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 305 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 306 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 307 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 308 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 309 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 310 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 311 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 312 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 313 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 314 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 315 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 316 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 317 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 318 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 319 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 320 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 321 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 322 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 323 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 324 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 325 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 326 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 327 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 328 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 329 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 330 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 331 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 332 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 333 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 334 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 335 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 336 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 337 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 338 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 339 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 340 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 341 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 342 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 343 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 344 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 345 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 346 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 347 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 348 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 349 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 350 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 351 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 352 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 353 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 354 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 355 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 356 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 357 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 358 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 359 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 360 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 361 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 362 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 363 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 364 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 365 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 366 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 367 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 368 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 369 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 370 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 371 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 372 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 373 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 374 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 375 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 376 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 377 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 378 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 379 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 380 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 381 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 382 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 383 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 384 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 385 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 386 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 387 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 388 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 389 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 390 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 391 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 392 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 393 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 394 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 395 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 396 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 397 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 398 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 399 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 400 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 401 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 402 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 403 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 404 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 405 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 406 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 407 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 408 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 409 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 410 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 411 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 413 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 414 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 415 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 416 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 417 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 418 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 419 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 420 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 421 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 422 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 423 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 424 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 425 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 426 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 427 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 428 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 429 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 430 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 431 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 432 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 433 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 434 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 435 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 436 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 437 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 438 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 439 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 440 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 441 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 442 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 443 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 444 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 445 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 446 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 447 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 448 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 449 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 450 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 451 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 452 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 453 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 454 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 455 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 456 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 457 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 458 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 459 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 460 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 461 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_RETURN_KEYWORD;
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 463 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_IDENTIFIER;
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 464 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 465 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 466 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 467 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 468 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 469 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 470 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 471 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 414:
/* rule 414 can match eol */
YY_RULE_SETUP
#line 472 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_NEW_LINE;
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 473 "Flex\\ScannerGLSL.l"
/* eat up whitespace */
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 474 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_UNKNOWN_TOKEN;
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 476 "Flex\\ScannerGLSL.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3843 "Source\\SavvyScannerGLSL.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	glslfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	glslfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					glslrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) glslrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1872 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1872 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1871);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) glslalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) glslalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		glslfree((void *) b->yy_ch_buf  );

	glslfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)glslalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)glslrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) glslalloc(new_size  );

		else
			(yy_start_stack) = (int *) glslrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *glslalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *glslrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void glslfree (void * ptr )
{
	free( (char *) ptr );	/* see glslrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 476 "Flex\\ScannerGLSL.l"


