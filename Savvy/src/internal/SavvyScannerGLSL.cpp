#line 2 "Source\\SavvyScannerGLSL.cpp"

#line 4 "Source\\SavvyScannerGLSL.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer glslFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *glslalloc (yy_size_t  );
void *glslrealloc (void *,yy_size_t  );
void glslfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include"SavvyScannerGLSL.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 407
#define YY_END_OF_BUFFER 408
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1817] =
    {   0,
        0,    0,  408,  406,  405,  404,  135,  388,  157,  152,
      167,  168,  165,  162,  159,  163,  158,  166,  396,  396,
      160,  161,  156,  164,  155,  395,  395,  171,  172,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  169,
      154,  170,  153,  405,  137,    4,  142,  145,  148,  143,
      138,  140,  139,  141,    3,    0,  144,  397,  396,  402,
      151,  147,  136,  146,  150,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  179,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  173,  395,  395,  347,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  149,    0,    1,  397,    0,
      398,  402,  403,  395,  395,  182,  395,  185,  186,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  209,  395,  395,  395,  395,
      395,  395,  221,  395,  395,  395,  395,  227,  395,  395,

      395,  395,  395,  235,  178,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,    8,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  269,  395,  395,  272,
      395,  395,  278,  279,  280,  395,  395,  395,  288,  346,
      395,  298,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  305,  395,  395,  395,  395,  395,  395,  310,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,    0,    0,    0,
      401,  403,  395,  395,  395,  183,  187,  189,  395,  395,
      395,  395,  395,    7,  395,  395,  395,  177,  207,  395,

      395,  395,  395,  387,  210,  395,  214,  217,  395,  395,
      395,  395,  395,  395,  395,  174,  395,  228,  395,  395,
      395,  131,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  270,  130,
       27,   33,   39,  395,  395,  395,  281,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  304,  306,  395,  308,  395,  395,  395,  309,
      395,  395,  311,  395,  395,  395,    5,  395,  395,  395,

        9,  395,  395,  395,  395,  395,  395,   21,   22,   23,
      395,  134,  395,  395,  395,    0,  400,  399,  395,  395,
      395,  395,  184,  188,  190,  395,  395,  395,  395,  395,
      176,  395,   12,   13,   14,  208,  395,  121,  395,  211,
      395,  395,  395,  395,  395,  395,  395,  395,   30,   36,
       42,  395,   24,   25,   26,  226,  395,    6,  395,  395,
       10,  234,  236,  237,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  128,  395,  395,  395,  395,  395,
      395,  395,  395,  263,  264,   15,   16,   17,  395,  265,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  282,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  302,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  334,  395,  395,
      395,  395,  395,  395,  395,  395,   18,   19,   20,  395,
      395,  180,  395,    0,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  391,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,   11,  395,  395,
      395,  395,  238,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      348,  266,  395,  395,   27,   28,   29,   34,   33,   35,
       40,   41,   39,  395,  395,  395,  283,  284,  285,  286,
      395,  395,  395,  395,  395,  395,  395,  395,  383,  395,
      395,  395,  395,  395,  394,  395,  395,  384,  132,  382,
      385,  386,   45,  175,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,    0,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      202,  381,  395,  395,  395,  395,  395,  395,  395,  395,

      212,  395,  390,  395,   30,   31,   32,   37,   36,   38,
       43,   44,   42,  395,  230,  231,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,   47,   48,   49,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  261,  395,  395,  395,  395,  129,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  299,  395,  300,  301,
      395,  395,  395,  395,  395,  314,  395,  395,  395,  395,
      395,  395,  395,  395,  395,   46,  395,  395,  395,  395,

      395,  395,  389,  395,  395,    0,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  200,  395,  395,  203,
      395,  127,  181,  395,  216,  395,  219,  395,  220,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  358,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,   53,   54,
       55,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      267,  380,  395,  395,  395,  395,  289,  395,  395,  395,
      395,  395,  124,  125,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
       50,   51,   52,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  126,  395,    0,  395,  395,  395,  395,
      191,  192,  395,  395,  395,  198,  199,  201,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,   74,  395,  395,  395,   56,  252,  395,  254,
      395,  395,  395,  395,  122,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  287,  395,  395,  395,  395,
      295,  303,   80,   81,   82,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  333,  335,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  123,    0,  395,
      223,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      215,  218,  395,  395,  395,  395,  240,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,   76,  395,  395,   57,

      395,  395,  395,  395,  395,  395,  395,  395,  255,  395,
      395,  395,  395,   83,   84,   85,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  307,  312,  395,
      395,  320,  395,  395,  395,  395,  395,  395,  395,   75,
      395,  395,   58,  395,  395,  395,  395,  395,  395,   86,
       87,   88,  395,  395,  345,    0,  395,  395,  395,  395,
      395,  395,  120,  395,  395,  395,  213,  229,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  366,  395,  369,  395,  395,

      395,  395,  376,  395,  395,  241,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,   59,  395,   71,  395,
      395,  395,  395,  395,  262,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  107,  395,  395,  395,   89,
      395,  395,  318,  395,  395,  323,  395,  395,  332,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      342,  395,  395,  395,  395,  395,  395,    0,  395,  224,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  239,
      395,  395,  351,  352,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  365,  395,  395,  395,  373,  395,
      395,  395,  395,  395,  395,  395,  395,   61,   73,  395,
       62,   65,  395,  395,  395,  395,  395,  395,  395,  395,
      253,  256,  395,  395,  395,  395,  109,  395,  395,   90,
      395,  395,  395,  395,  290,  395,  292,  395,  294,  395,
      297,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,   60,   72,  395,  395,  337,  395,  395,
      395,  395,  395,  395,  395,  395,  108,  395,  395,   91,
        0,  395,  395,  395,  194,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  356,  395,  395,  361,
      395,  395,  364,  395,  370,  395,  395,  395,  395,  395,
      395,  395,  395,   64,   67,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  250,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  268,  395,  273,  133,  395,
      293,  296,  395,  395,  395,  395,   92,  395,  104,  395,
      395,  395,  315,  395,  395,  322,  395,  395,  395,  395,
      395,   63,   66,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,    0,  395,
      395,  193,  395,  395,  197,  395,  205,  395,  232,  395,

      395,  395,  353,  395,  395,  395,  395,  395,  395,  367,
      395,  395,  395,  395,  395,  378,  395,  395,  395,  395,
      395,   77,  244,  245,  395,  395,  248,  249,  251,   68,
      257,  395,  395,  395,  395,  395,  395,   94,  106,  395,
      271,  395,  395,  395,  395,  291,   95,  395,   98,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  326,
      395,  395,  395,  331,  395,  395,  395,  395,  339,  395,
      341,  395,  344,  395,  395,  395,   93,  105,  395,    0,
      395,  395,  395,  395,  204,  206,  233,  395,  395,  395,
      395,  357,  395,  395,  395,  395,  371,  395,  395,  395,

      395,  395,  395,  395,   79,   70,  395,  395,  395,  395,
      395,   97,  100,  395,  395,  395,  395,  395,  395,  395,
      113,  395,  395,  395,  114,  395,  395,  395,  395,  395,
      395,  324,  395,  395,  395,  330,   78,   69,  336,  395,
      340,  343,   96,   99,  395,  395,    0,  222,  395,  395,
      395,    0,    0,  395,  395,  395,  362,  395,  368,  395,
      395,  395,  377,  379,  242,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  110,
      395,  101,  395,  313,  395,  395,  321,  395,  395,  395,
      395,  338,  395,  395,    0,  395,  395,  395,    0,  349,

        0,  350,  395,  395,  395,  395,  372,  374,  375,  395,
      395,  395,  395,  395,  395,  112,  103,  395,  395,  395,
      395,  395,  395,  395,  395,  115,  395,  319,  395,  395,
      328,  395,  111,  102,    0,  225,  395,  395,  395,  395,
      395,  363,  243,  395,  395,  395,  395,  395,  395,  395,
      276,  395,  395,  395,  395,  395,  395,  395,  395,  329,
        0,  395,  395,  395,  355,  395,  246,  247,  395,  259,
      260,  395,  275,  277,  395,  395,  116,  395,  316,  395,
      395,    0,  395,  395,  395,  359,  395,  395,  395,  117,
      118,  395,  317,  395,  327,    0,  395,  395,  354,  395,

      258,  395,  395,  325,    2,  195,  196,  395,  395,  119,
      360,  395,  395,  395,  274,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   22,   24,   22,   25,   26,   27,
       28,   29,    1,    1,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   39,   39,
       53,    1,   54,    1,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[86] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1822] =
    {   0,
        0,    0, 1987, 1988,   84, 1988, 1958,    0, 1957,   79,
     1988, 1988, 1956,   77, 1988,   76, 1988,   80,   94,  104,
     1988, 1988,   65, 1955,   66,    0,   29, 1988, 1988,   72,
       78,   89,   97,   64,  102,   33, 1918,  115,  126,  131,
     1911, 1904,   82,  108,  134,   77,  147,   50,   90, 1988,
     1951, 1988, 1988,   97, 1988,    0, 1988, 1988, 1988, 1988,
     1988, 1988, 1988, 1988, 1974,    0, 1988,  208,  218,  226,
     1988, 1988, 1988, 1988, 1988,    0, 1913, 1917, 1901, 1904,
     1906, 1892, 1907,  137, 1897,  102, 1899, 1908, 1906, 1906,
     1891, 1900, 1907,  131, 1892, 1902,  148, 1886, 1903,   27,

     1898, 1883, 1880, 1884,   77, 1885,  143, 1897, 1879,  158,
     1887, 1895,  191, 1887,    0, 1880,   84,  142,  196, 1887,
     1866, 1885,  184,  197,  187,  195,  188, 1885,  206, 1868,
     1884, 1863, 1881,  215, 1863, 1870, 1881,  119, 1866, 1862,
      213, 1870, 1864, 1853,  208, 1872,  214, 1854,  214,  218,
     1869,  222,  224, 1864, 1863, 1988, 1883,    0,  279,  292,
     1988,  300,    0, 1850,  261,    0, 1850,    0,    0, 1854,
     1853, 1853, 1847, 1860,  275, 1851, 1861, 1855, 1857, 1854,
     1846, 1844, 1851,  218, 1850, 1846, 1834,  246, 1834, 1846,
      269, 1830,    0, 1847, 1845, 1842, 1845, 1881, 1839, 1824,

     1838, 1821,  152,    0,    0, 1837, 1815, 1834,  310, 1836,
     1815, 1827, 1833, 1826, 1820,  299,  272, 1818, 1816, 1828,
     1825, 1812, 1802, 1818, 1805, 1822, 1858, 1805,  314,    0,
     1811, 1804,    0,    0, 1812, 1798, 1811, 1802, 1835, 1808,
     1801,    0, 1802, 1806,  264, 1789, 1787, 1793, 1790, 1787,
     1790, 1795, 1787, 1781,  335, 1784, 1778, 1778, 1789,  289,
     1782,  269, 1791, 1793, 1773, 1780, 1785, 1789, 1776, 1786,
     1784,  346, 1767, 1781, 1783, 1771, 1762, 1763,  351,  359,
      371,    0,  349, 1762, 1759, 1770, 1769, 1768, 1766, 1765,
     1764, 1757, 1762,    0, 1759, 1764,  365,    0,    0, 1752,

     1749, 1746, 1756,    0,    0, 1745,  365,  366, 1758, 1744,
     1760, 1759,  383, 1747,  386,    0, 1746,    0, 1751, 1751,
      322,    0, 1735, 1736, 1733, 1736, 1731,  341, 1732, 1737,
     1743, 1733,  164, 1725,  353, 1744, 1739,  350, 1728, 1722,
     1725, 1724, 1732, 1733, 1758, 1727, 1717, 1716, 1715, 1716,
     1725, 1716,  392, 1708, 1712, 1707, 1733, 1705,    0,    0,
     1700, 1699, 1698, 1712, 1699, 1701,    0, 1713, 1699, 1715,
     1698, 1696,  382, 1712, 1697, 1706, 1709, 1691, 1690, 1703,
     1694, 1700,    0,    0, 1684,    0, 1737, 1736, 1736,    0,
     1697, 1696,    0, 1686, 1676, 1677,    0, 1692, 1717, 1686,

     1716, 1712, 1675, 1686, 1672, 1711,  401,    0,    0,    0,
     1677,    0, 1665, 1679, 1678, 1673,  415,  426, 1661, 1675,
     1670, 1660,    0,    0,    0, 1674, 1671, 1661, 1653, 1668,
        0, 1654,    0,    0,    0,    0, 1666,    0, 1656,    0,
     1654, 1659, 1652, 1657, 1660, 1651, 1645, 1648, 1637, 1636,
     1635, 1653,    0,    0,    0,    0, 1642,    0, 1664, 1663,
     1678,    0,    0,    0, 1645, 1643, 1639,  360, 1635, 1637,
      350, 1623, 1644, 1633, 1625,  277, 1635, 1630, 1623, 1623,
     1635, 1621, 1633, 1651,    0, 1631,  433, 1611, 1614, 1617,
     1623, 1612, 1618,    0,    0,    0,    0,    0, 1609,    0,

     1620, 1619, 1617,  435,  438,  441, 1601, 1611, 1598,  448,
     1603, 1609, 1599, 1630, 1603, 1616, 1602, 1601, 1610, 1599,
     1598, 1608, 1607, 1600, 1594, 1628, 1601, 1601, 1596, 1641,
     1640, 1639, 1580, 1591, 1618, 1579, 1580,    0, 1594, 1589,
     1584, 1568, 1573, 1579, 1577, 1573,    0,    0,    0, 1572,
     1577,    0, 1570, 1577, 1565, 1564, 1568, 1575,  440, 1561,
     1571, 1563, 1564,    0, 1561, 1553, 1572, 1558, 1570, 1556,
     1550, 1559, 1563, 1563,  456,  465,  468,    0, 1547, 1588,
     1587, 1553,  393, 1545, 1548, 1552, 1544, 1555, 1540, 1535,
     1539, 1548, 1551,  431, 1548, 1536, 1540, 1535, 1531, 1527,

     1525, 1521, 1532, 1524, 1536,  478, 1562, 1561, 1560, 1517,
     1515, 1514, 1519,  415, 1513, 1513, 1516, 1529, 1524, 1523,
        0,    0, 1526, 1511,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1548, 1508, 1547,    0,    0,    0,    0,
     1506, 1512, 1519, 1501, 1497, 1505, 1501, 1500,    0, 1495,
     1501, 1492, 1491, 1507,    0, 1487, 1490,    0, 1488,    0,
        0,    0,    0,    0, 1501, 1500, 1489, 1485,  481, 1482,
     1481, 1487,  469, 1494, 1480, 1483, 1484, 1481, 1485, 1488,
     1472, 1482, 1489,  434, 1474, 1464,  451, 1469, 1471, 1464,
        0,    0, 1464, 1479, 1462, 1476, 1462, 1474, 1460, 1472,

        0, 1462,    0, 1470,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1451,    0,    0, 1453, 1457, 1462, 1492,
     1491,  408, 1448, 1466, 1461, 1464, 1461, 1445, 1450, 1460,
     1445, 1451, 1438, 1437, 1447, 1443,  479, 1449, 1437, 1471,
     1458, 1437, 1471, 1470, 1469, 1425, 1424, 1469,  484,    0,
     1428, 1436, 1439, 1439, 1425, 1409, 1417, 1426, 1437, 1417,
      187,  213,  270,  349,  422,  424,    0,  448,  445,  427,
      450,  450,  464,  461,  450,  451,    0,  446,    0,    0,
      452,  468,  513,  454,  459,  503,  461,  463,  504,  505,
      507,  465,  466,  475,  491,    0,  482,  497,  485,  486,

      483,  484,    0,  498,  492,  491,  505,  502,  488,  496,
      506,  507,  499,  510,  490,  501,    0,  498,  508,    0,
      539,    0,    0,  500,    0,  502,    0,  522,    0,  523,
      506,  525,  513,  519,  520,  516,  527,  553,  522,  517,
      522,  536,    0,  555,  526,  522,  546,  565,  534,  524,
      540,  531,  542,  524,  534,  532,  543,  537,  578,  579,
        0,  549,  554,  540,  541,  568,  556,  549,  557,  559,
      562,  551,  563,  551,  557,  557,  572,  554,  558,  613,
      600,    0,  567,  563,  579,  578,    0,  580,  573,  622,
      574,  575,    0,    0,  577,  614,  615,  616,  574,  575,

      592,  595,  598,  585,  595,  584,  582,  603,  600,  581,
      632,  633,    0,  603,  608,  618,  599,  593,  603,  602,
      603,  657,  608,    0,  600,  625,  614,  604,  620,  641,
        0,    0,  615,  618,  627,    0,    0,    0,  622,  613,
      624,  634,  635,  636,  628,  625,  651,  627,  641,  628,
      629,  634,  634,  650,  669,  670,  651,  635,  642,  641,
      647,  654,  645,  652,  647,  654,  681,  650,  644,  685,
      651,  656,  671,  655,  656,  657,  684,  672,  672,  674,
      662,  663,  707,  680,  675,  680,  711,    0,  675,    0,
      683,  685,  710,  671,    0,  674,  715,  716,  717,  675,

      676,  681,  683,  682,  681,    0,  681,  698,  680,  741,
      742,    0,  734,  736,    0,  704,  710,  697,  706,  695,
      715,  713,  712,  704,  715,  708,  697,    0,    0,  706,
      707,  737,  725,  725,  727,  718,  730,  733,  730,  719,
      720,  761,  762,  763,  721,  722,  721,    0,  733,  751,
        0,  725,  730,  757,  730,  750,  732,  733,  735,  733,
        0,    0,  736,  753,  743,  740,    0,  740,  741,  744,
      743,  761,  751,  752,  762,  759,  747,  758,  790,  754,
      758,  748,  761,  754,  799,  777,  764,  762,  776,  804,
      763,  763,  771,  761,  769,  770,  814,  787,  786,  817,

      792,  793,  777,  776,  794,  780,  781,  795,    0,  796,
      790,  798,  784,  830,  831,    0,  801,  806,  788,  824,
      802,  803,  810,  850,  852,  792,  794,  795,  796,  803,
      815,  806,  833,  821,  819,  822,  824,    0,  842,  823,
      828,  845,  815,  825,  818,  821,  833,  821,  822,  866,
      839,  838,  869,  865,  841,  835,  884,  836,  837,  876,
      877,    0,  847,  852,    0,  906,  851,  852,  849,  836,
      855,  847,    0,  844,  859,  860,    0,    0,  883,  862,
      868,  869,  867,  864,  864,  852,  853,  893,  863,  864,
      875,  863,  862,  865,  879,    0,  880,    0,  867,  868,

      884,  877,    0,  907,  875,  913,  917,  893,  894,  878,
      877,  880,  881,  875,  876,  884,    0,  928,    0,  886,
      887,  904,  894,  935,    0,  893,  894,  921,  910,  911,
      913,  918,  899,  916,  900,  903,  900,  958,  964,  959,
      966,  961,  913,  931,  915,  959,  932,  935,  932,  963,
      933,  935,  953,  936,  938,  963,  920,  934,    0,  946,
      948,  932,  932,  935,  936,  944,  953,  953,  935,  996,
      997,  946,  947,  974,  962,  962,  964,  978,  953,    0,
      959,  972,  956,  968,  975,  959,  960,  965,  971,    0,
      967,  968,    0,    0,  969,  969,  970, 1008,  973,  985,

      970,  975,  982,  988,    0, 1010,  983,  986,    0, 1013,
      983, 1015,  982,  999,  977,  978,  986,    0,    0,  987,
        0,    0, 1005, 1004,  994,  986, 1010,  994,  998, 1013,
        0,    0, 1014,  996,  999, 1002, 1046, 1019, 1018, 1049,
     1013, 1014, 1009, 1023,    0, 1064,    0, 1062,    0, 1063,
        0, 1031, 1029, 1033, 1017, 1016, 1033, 1020, 1021, 1032,
     1035, 1024, 1037, 1038, 1025, 1028, 1032, 1042, 1064, 1045,
     1026, 1027, 1035,    0,    0, 1036, 1040,    0, 1092, 1094,
     1034, 1035, 1036, 1037, 1044, 1045, 1089, 1062, 1061, 1092,
     1063, 1049, 1061, 1055, 1094, 1068, 1071, 1055, 1057, 1058,

     1065, 1077, 1078, 1075, 1080, 1081,    0, 1102, 1085,    0,
     1066, 1085,    0, 1111, 1107, 1071, 1078, 1072, 1090, 1117,
     1087, 1076, 1080,    0,    0, 1098, 1099, 1076, 1098, 1099,
     1091, 1102, 1082, 1093,    0, 1090, 1084, 1090, 1134, 1111,
     1112, 1096, 1095, 1098, 1099,    0, 1098, 1144,    0, 1157,
        0,    0, 1098, 1109, 1100, 1110, 1137, 1115,    0, 1113,
     1131, 1114, 1146, 1129, 1118,    0, 1137, 1135, 1134, 1136,
     1123,    0,    0, 1142, 1143, 1144, 1122, 1179, 1185, 1180,
     1187, 1183, 1152, 1153, 1137, 1136, 1139, 1140, 1146, 1155,
     1141,    0, 1157, 1149,    0, 1144,    0, 1160,    0, 1146,

     1162, 1163,    0, 1168, 1169, 1193, 1152, 1157, 1169, 1192,
     1162, 1168, 1164, 1159, 1175,    0, 1155, 1181, 1165, 1159,
     1160,    0,    0,    0, 1170, 1179,    0,    0,    0,    0,
        0, 1183, 1183, 1189, 1166, 1167, 1175,    0,    0, 1176,
        0, 1175, 1175, 1184, 1190,    0, 1207, 1177, 1209, 1201,
     1195, 1181, 1204, 1202, 1202, 1202, 1190, 1205, 1207, 1224,
     1194, 1192, 1211,    0, 1191, 1192, 1198, 1254,    0, 1252,
        0, 1253,    0, 1197, 1198, 1206,    0,    0, 1207, 1225,
     1203, 1219, 1226, 1227,    0,    0,    0, 1233, 1234, 1213,
     1214,    0, 1226, 1217, 1218, 1224,    0, 1224, 1235, 1236,

     1218, 1238, 1232, 1236,    0,    0, 1254, 1246, 1234, 1243,
     1237,    0,    0, 1250, 1251, 1238, 1248, 1254, 1255, 1249,
        0, 1250, 1234, 1259,    0, 1236, 1247, 1243, 1258, 1260,
     1246, 1279, 1262, 1264, 1265,    0,    0,    0,    0, 1307,
        0,    0,    0,    0, 1271, 1272, 1260,    0, 1253, 1258,
     1259, 1316, 1324, 1285, 1286, 1281,    0, 1314,    0, 1284,
     1281, 1282,    0,    0,    0, 1296, 1279, 1289, 1284, 1286,
     1290, 1282, 1283, 1296, 1304, 1304, 1294, 1312, 1313,    0,
     1312, 1325, 1295,    0, 1300, 1300,    0, 1315, 1316, 1304,
     1313,    0, 1301, 1302, 1308, 1324, 1325, 1326, 1370, 1988,

     1378, 1988, 1333, 1334, 1336, 1337,    0,    0,    0, 1334,
     1352, 1347, 1337, 1351, 1345,    0,    0, 1349, 1354, 1355,
     1356, 1358, 1359, 1349, 1357,    0, 1361,    0, 1361, 1349,
        0, 1351,    0,    0, 1362,    0, 1359, 1360, 1360, 1361,
     1393,    0,    0, 1362, 1374, 1365, 1361, 1377, 1380, 1366,
        0, 1381, 1371, 1372, 1365, 1388, 1370, 1372, 1387,    0,
     1390, 1389, 1390, 1413,    0, 1419,    0,    0, 1389,    0,
        0, 1422,    0,    0, 1377, 1378,    0, 1398, 1384, 1399,
     1385, 1436, 1393, 1394, 1431,    0, 1406, 1407, 1397,    0,
        0, 1398,    0, 1394,    0, 1466, 1396, 1397,    0, 1413,

        0, 1398, 1397,    0, 1988,    0,    0, 1397, 1408,    0,
        0, 1403, 1419, 1407,    0, 1988, 1488, 1478, 1491, 1479,
     1480
    } ;

static yyconst flex_int16_t yy_def[1822] =
    {   0,
     1816,    1, 1816, 1816, 1816, 1816, 1816, 1817, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1818, 1818, 1816, 1816, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1816,
     1816, 1816, 1816, 1816, 1816, 1817, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1819, 1816, 1816, 1816, 1820,
     1816, 1816, 1816, 1816, 1816, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1816, 1816, 1819, 1816, 1816,
     1816, 1816, 1821, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1816, 1816, 1816,
     1816, 1821, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1816, 1816, 1816, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1816, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1816, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1816, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1816, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1816, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1816, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1816, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1816, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1816, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1816,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1816, 1818, 1818, 1818,
     1818, 1816, 1816, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1816, 1818, 1818, 1818, 1816, 1816,

     1816, 1816, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1816, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1816, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1816, 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818, 1816, 1818, 1818, 1818, 1818,

     1818, 1818, 1818, 1818, 1816, 1818, 1818, 1818, 1818, 1818,
     1818, 1818, 1818, 1818, 1818,    0, 1816, 1816, 1816, 1816,
     1816
    } ;

static yyconst flex_int16_t yy_nxt[2074] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   21,   22,   23,   24,   25,   26,
       26,   26,   26,   27,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   28,   29,   26,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   26,   26,   39,   40,   41,   42,
       43,   26,   44,   45,   46,   47,   48,   49,   26,   26,
       26,   50,   51,   52,   53,   54,   58,   54,   61,   63,
       65,   71,   72,   74,   75,   66,   77,   78,   54,  112,

       54,  193,  194,   64,   62,  113,   59,   67,   68,  152,
       69,   69,   69,   69,   69,   69,   69,   69,   68,  153,
       69,   69,   69,   69,   69,   69,   69,   69,   79,   80,
      102,   96,  143,   85,  199,  103,  144,  131,   81,  214,
       82,   86,  104,  200,   91,   83,   84,   87,   92,  145,
       88,  132,  154,   89,   90,   93,   97,  105,   94,  215,
       98,   95,  155,  133,   99,  106,  100,  134,  107,  108,
      174,  109,   70,  101,  110,  115,  175,  135,  116,  111,
      251,  121,  117,  118,  122,  123,  125,  252,  119,  136,
      126,  120,  171,  183,  127,  124,  137,  138,  202,  184,

      128,  139,  146,  185,  186,  140,  172,  323,  141,  189,
      147,  142,  203,  206,  148,  149,  216,  207,  217,  472,
      150,  324,  190,  151,  159,  159,  159,  159,  159,  159,
      159,  159,   68,  473,   69,   69,   69,   69,   69,   69,
       69,   69,  162,  162,  162,  162,  162,  162,  162,  162,
      210,  218,  224,  231,  226,  878,  233,  225,  227,  219,
      211,  229,  232,  261,  220,  230,  234,  160,  161,  236,
      244,  255,  256,  269,  228,  245,  237,  267,  238,  272,
      239,  264,  265,  262,  268,  257,  879,  274,  246,  247,
      275,  302,  303,  270,  273,  159,  159,  159,  159,  159,

      159,  159,  159,  279,  284,  280,  292,  285,  281,  281,
      281,  281,  281,  281,  281,  281,  162,  162,  162,  162,
      162,  162,  162,  162,  307,  308,  311,  348,  397,  346,
      376,  349,  361,  362,  363,  293,  377,  398,  160,  161,
      596,  328,  880,  312,  329,  330,  331,  332,  394,  333,
      597,  334,  387,  335,  388,  389,  336,  337,  347,  338,
      339,  459,  460,  395,  408,  409,  410,  417,  417,  417,
      417,  417,  417,  417,  417,  418,  418,  418,  418,  418,
      418,  418,  418,  433,  434,  435,  364,  281,  281,  281,
      281,  281,  281,  281,  281,  419,  441,  443,  420,  442,

      444,  449,  450,  451,  453,  454,  455,  466,  475,  480,
      496,  497,  498,  481,  515,  586,  467,  881,  516,  547,
      548,  549,  476,  590,  718,  477,  591,  719,  517,  587,
      518,  417,  417,  417,  417,  417,  417,  417,  417,  836,
      837,  519,  418,  418,  418,  418,  418,  418,  418,  418,
      607,  608,  609,  625,  626,  627,  628,  629,  630,  631,
      632,  633,  610,  611,  612,  637,  638,  639,  640,  684,
      755,  685,  613,  686,  705,  706,  707,  730,  756,  614,
      687,  731,  688,  708,  709,  710,  711,  712,  713,  757,
      882,  689,  811,  883,  690,  743,  744,  745,  789,  790,

      791,  797,  812,  884,  885,  798,  815,  886,  746,  747,
      852,  792,  793,  865,  816,  799,  887,  800,  853,  888,
      889,  890,  891,  892,  866,  893,  894,  895,  901,  867,
      896,  897,  898,  902,  909,  910,  911,  912,  903,  913,
      914,  915,  904,  899,  900,  905,  906,  907,  916,  908,
      917,  918,  919,  920,  921,  922,  923,  924,  925,  926,
      927,  928,  929,  930,  931,  932,  933,  935,  936,  937,
      938,  939,  940,  943,  934,  944,  941,  945,  946,  947,
      948,  949,  950,  951,  942,  952,  953,  954,  955,  956,
      957,  958,  959,  960,  961,  962,  963,  965,  966,  967,

      968,  969,  970,  971,  972,  973,  974,  975,  976,  979,
      980,  964,  981,  982,  983,  984,  985,  986,  987,  977,
      988,  989,  990,  991,  978,  992,  993,  994,  995,  996,
      997,  998,  999, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1010, 1011, 1000, 1001, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1028,
     1029, 1030, 1031, 1034, 1035, 1036, 1027, 1037, 1038, 1039,
     1021, 1040, 1041, 1032, 1042, 1043, 1044, 1047, 1033, 1048,
     1049, 1050, 1051, 1052, 1053, 1054, 1055, 1045, 1046, 1056,
     1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,

     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
     1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1088,
     1089, 1086, 1090, 1091, 1087, 1092, 1093, 1094, 1095, 1096,
     1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
     1128, 1127, 1129, 1130, 1136, 1132, 1137, 1138, 1139, 1140,
     1141, 1142, 1143, 1144, 1145, 1146, 1133, 1147, 1148, 1149,
     1131, 1134, 1135, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
     1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,

     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
     1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
     1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
     1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
     1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
     1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
     1227, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
     1239, 1228, 1240, 1241, 1242, 1243, 1229, 1244, 1245, 1246,
     1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
     1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,

     1267, 1268, 1269, 1270, 1271, 1272, 1273, 1276, 1277, 1278,
     1279, 1280, 1281, 1282, 1283, 1284, 1285, 1274, 1286, 1287,
     1288, 1290, 1275, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
     1298, 1289, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
     1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
     1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1330, 1325,
     1331, 1326, 1332, 1333, 1334, 1335, 1336, 1337, 1327, 1338,
     1328, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1329,
     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1359, 1361, 1362, 1363, 1364, 1365, 1366, 1369,

     1370, 1371, 1367, 1372, 1373, 1368, 1374, 1375, 1376, 1360,
     1377, 1378, 1379, 1380, 1381, 1383, 1382, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
     1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
     1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
     1417, 1419, 1420, 1422, 1423, 1418, 1424, 1425, 1426, 1427,
     1428, 1421, 1429, 1431, 1432, 1433, 1435, 1436, 1437, 1438,
     1439, 1440, 1430, 1434, 1441, 1442, 1443, 1444, 1445, 1446,
     1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
     1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,

     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
     1487, 1488, 1489, 1490, 1491, 1492, 1493, 1495, 1496, 1497,
     1498, 1494, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
     1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
     1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
     1527, 1528, 1529, 1530, 1531, 1532, 1535, 1536, 1537, 1538,
     1539, 1540, 1541, 1542, 1543, 1546, 1533, 1547, 1548, 1549,
     1534, 1544, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
     1545, 1558, 1559, 1560, 1561, 1562, 1564, 1565, 1566, 1567,

     1568, 1569, 1570, 1571, 1572, 1563, 1573, 1574, 1575, 1576,
     1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
     1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
     1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
     1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
     1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
     1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
     1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
     1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,

     1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
     1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
     1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
     1697, 1698, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1703, 1704,
     1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
     1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1700,
     1724, 1725, 1726, 1727, 1728, 1729, 1730, 1702, 1731, 1732,
     1733, 1734, 1735, 1736, 1737, 1738, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1701, 1701, 1701, 1701, 1701, 1701,

     1701, 1701, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
     1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
     1757, 1758, 1759, 1700, 1760, 1761, 1762, 1763, 1764, 1765,
     1766, 1702, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
     1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
     1785, 1786, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795,
     1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805,
     1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815,
       76,  163,  282,  877,  876,  875,  874, 1787,   56,  873,
       56,  158,  872,  158,  871,  870,  869,  868,  864,  863,

      862,  861,  860,  859,  858,  857,  856,  855,  854,  851,
      850,  849,  848,  847,  846,  845,  844,  843,  842,  841,
      840,  839,  838,  835,  834,  833,  832,  831,  830,  829,
      828,  827,  826,  825,  824,  823,  822,  821,  820,  819,
      818,  817,  814,  813,  810,  809,  808,  807,  806,  805,
      804,  803,  802,  801,  796,  795,  794,  788,  787,  786,
      785,  784,  783,  782,  781,  780,  779,  778,  777,  776,
      775,  774,  773,  772,  771,  770,  769,  768,  767,  766,
      765,  764,  763,  762,  761,  760,  759,  758,  754,  753,
      752,  751,  750,  749,  748,  742,  741,  740,  739,  738,

      737,  736,  735,  734,  733,  732,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  717,  716,  715,  714,
      704,  703,  702,  701,  700,  699,  698,  697,  696,  695,
      694,  693,  692,  691,  683,  682,  681,  680,  679,  678,
      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666,  665,  664,  663,  662,  661,  660,  659,  658,
      657,  656,  655,  654,  653,  652,  651,  650,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  636,  635,  634,
      624,  623,  622,  621,  620,  619,  618,  617,  616,  615,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  595,

      594,  593,  592,  589,  588,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  479,  478,

      474,  471,  470,  469,  468,  465,  464,  463,  462,  461,
      458,  457,  456,  452,  448,  447,  446,  445,  440,  439,
      438,  437,  436,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  416,  415,  414,  413,  412,
      411,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      396,  393,  392,  391,  390,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  345,  344,  343,  342,
      341,  340,  327,  326,  325,  322,  321,  320,  319,  318,

      317,  316,  315,  314,  313,  310,  309,  306,  305,  304,
      301,  300,  299,  298,  297,  296,  295,  294,  291,  290,
      289,  288,  287,  286,  283,  278,  277,  276,  271,  266,
      263,  260,  259,  258,  254,  253,  250,  249,  248,  243,
      242,  241,  240,  235,  223,  222,  221,  213,  212,  209,
      208,  205,  204,  201,  198,  197,  196,  195,  192,  191,
      188,  187,  182,  181,  180,  179,  178,  177,  176,  173,
      170,  169,  168,  167,  166,  165,  164,  157,  156,  130,
      129,  114,   73,   60,   57,   55, 1816,    3, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,

     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816
    } ;

static yyconst flex_int16_t yy_chk[2074] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,   10,    5,   14,   16,
       18,   23,   23,   25,   25,   18,   27,   27,   54,   36,

       54,  100,  100,   16,   14,   36,   10,   18,   19,   48,
       19,   19,   19,   19,   19,   19,   19,   19,   20,   48,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   30,
       34,   33,   46,   31,  105,   34,   46,   43,   30,  117,
       30,   31,   34,  105,   32,   30,   30,   31,   32,   46,
       31,   43,   49,   31,   31,   32,   33,   35,   32,  117,
       33,   32,   49,   44,   33,   35,   33,   44,   35,   35,
       86,   35,   19,   33,   35,   38,   86,   44,   38,   35,
      138,   39,   38,   38,   39,   39,   40,  138,   38,   45,
       40,   38,   84,   94,   40,   39,   45,   45,  107,   94,

       40,   45,   47,   94,   94,   45,   84,  203,   45,   97,
       47,   45,  107,  110,   47,   47,  118,  110,  118,  333,
       47,  203,   97,   47,   68,   68,   68,   68,   68,   68,
       68,   68,   69,  333,   69,   69,   69,   69,   69,   69,
       69,   69,   70,   70,   70,   70,   70,   70,   70,   70,
      113,  119,  123,  126,  124,  761,  127,  123,  124,  119,
      113,  125,  126,  145,  119,  125,  127,   68,   68,  129,
      134,  141,  141,  150,  124,  134,  129,  149,  129,  152,
      129,  147,  147,  145,  149,  141,  762,  153,  134,  134,
      153,  184,  184,  150,  152,  159,  159,  159,  159,  159,

      159,  159,  159,  160,  165,  160,  175,  165,  160,  160,
      160,  160,  160,  160,  160,  160,  162,  162,  162,  162,
      162,  162,  162,  162,  188,  188,  191,  217,  262,  216,
      245,  217,  229,  229,  229,  175,  245,  262,  159,  159,
      476,  209,  763,  191,  209,  209,  209,  209,  260,  209,
      476,  209,  255,  209,  255,  255,  209,  209,  216,  209,
      209,  321,  321,  260,  272,  272,  272,  279,  279,  279,
      279,  279,  279,  279,  279,  280,  280,  280,  280,  280,
      280,  280,  280,  297,  297,  297,  229,  281,  281,  281,
      281,  281,  281,  281,  281,  283,  307,  308,  283,  307,

      308,  313,  313,  313,  315,  315,  315,  328,  335,  338,
      353,  353,  353,  338,  373,  468,  328,  764,  373,  407,
      407,  407,  335,  471,  583,  335,  471,  583,  373,  468,
      373,  417,  417,  417,  417,  417,  417,  417,  417,  722,
      722,  373,  418,  418,  418,  418,  418,  418,  418,  418,
      487,  487,  487,  504,  504,  504,  505,  505,  505,  506,
      506,  506,  487,  487,  487,  510,  510,  510,  510,  559,
      614,  559,  487,  559,  575,  575,  575,  594,  614,  487,
      559,  594,  559,  576,  576,  576,  577,  577,  577,  614,
      765,  559,  684,  766,  559,  606,  606,  606,  669,  669,

      669,  673,  684,  768,  769,  673,  687,  770,  606,  606,
      737,  669,  669,  749,  687,  673,  771,  673,  737,  772,
      773,  774,  775,  776,  749,  778,  781,  782,  784,  749,
      783,  783,  783,  785,  787,  788,  789,  790,  786,  791,
      792,  793,  786,  783,  783,  786,  786,  786,  794,  786,
      795,  797,  798,  799,  800,  801,  802,  804,  805,  806,
      807,  808,  809,  810,  811,  812,  813,  814,  815,  816,
      818,  819,  821,  824,  813,  826,  821,  828,  830,  831,
      832,  833,  834,  835,  821,  836,  837,  838,  839,  840,
      841,  842,  844,  845,  846,  847,  848,  849,  850,  851,

      852,  853,  854,  855,  856,  857,  858,  859,  860,  862,
      863,  848,  864,  865,  866,  867,  868,  869,  870,  860,
      871,  872,  873,  874,  860,  875,  876,  877,  878,  879,
      880,  880,  880,  881,  883,  884,  885,  886,  888,  889,
      890,  891,  892,  880,  880,  895,  896,  897,  898,  899,
      900,  901,  902,  903,  904,  905,  906,  907,  908,  909,
      910,  911,  912,  914,  915,  916,  908,  917,  918,  919,
      903,  920,  921,  912,  922,  922,  922,  923,  912,  925,
      926,  927,  928,  929,  930,  933,  934,  922,  922,  935,
      939,  940,  941,  942,  943,  944,  945,  946,  947,  948,

      949,  950,  951,  952,  953,  954,  955,  956,  957,  958,
      959,  960,  961,  962,  963,  964,  965,  966,  967,  968,
      969,  967,  970,  971,  967,  972,  973,  974,  975,  976,
      977,  978,  979,  980,  981,  982,  983,  984,  985,  986,
      987,  989,  991,  992,  993,  994,  996,  997,  998,  999,
     1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010,
     1011, 1010, 1011, 1013, 1016, 1014, 1017, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1014, 1027, 1030, 1031,
     1013, 1014, 1014, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
     1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049,

     1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
     1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073,
     1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
     1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114,
     1115, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
     1126, 1115, 1127, 1128, 1129, 1130, 1115, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144,
     1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,

     1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1166,
     1167, 1168, 1169, 1170, 1171, 1172, 1174, 1161, 1175, 1176,
     1179, 1180, 1161, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
     1188, 1179, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197,
     1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209,
     1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1220, 1218,
     1221, 1218, 1222, 1223, 1224, 1226, 1227, 1228, 1218, 1229,
     1218, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1218,
     1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
     1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,

     1258, 1260, 1256, 1261, 1262, 1256, 1263, 1264, 1265, 1250,
     1266, 1267, 1268, 1269, 1270, 1271, 1270, 1271, 1272, 1273,
     1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284,
     1285, 1286, 1287, 1288, 1289, 1291, 1292, 1295, 1296, 1297,
     1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308,
     1310, 1311, 1312, 1313, 1314, 1310, 1315, 1316, 1317, 1320,
     1323, 1312, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1333,
     1334, 1335, 1324, 1327, 1336, 1337, 1338, 1339, 1340, 1341,
     1342, 1343, 1344, 1346, 1348, 1350, 1352, 1353, 1354, 1355,
     1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,

     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1376, 1377,
     1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
     1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
     1399, 1395, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1408,
     1409, 1411, 1412, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
     1421, 1422, 1423, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
     1433, 1434, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
     1444, 1445, 1447, 1448, 1448, 1450, 1439, 1453, 1454, 1455,
     1439, 1448, 1456, 1457, 1458, 1460, 1461, 1462, 1463, 1464,
     1448, 1465, 1467, 1468, 1469, 1470, 1471, 1474, 1475, 1476,

     1477, 1478, 1479, 1480, 1481, 1470, 1482, 1483, 1484, 1485,
     1486, 1487, 1488, 1489, 1490, 1491, 1493, 1494, 1496, 1498,
     1500, 1501, 1502, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1513, 1514, 1515, 1517, 1518, 1519, 1520, 1521,
     1525, 1526, 1532, 1533, 1534, 1535, 1536, 1537, 1540, 1542,
     1543, 1544, 1545, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
     1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563,
     1565, 1566, 1567, 1568, 1570, 1572, 1574, 1575, 1576, 1579,
     1580, 1581, 1582, 1583, 1584, 1588, 1589, 1590, 1591, 1593,
     1594, 1595, 1596, 1598, 1599, 1600, 1601, 1602, 1603, 1604,

     1607, 1608, 1609, 1610, 1611, 1614, 1615, 1616, 1617, 1618,
     1619, 1620, 1622, 1623, 1624, 1626, 1627, 1628, 1629, 1630,
     1631, 1632, 1633, 1634, 1635, 1640, 1645, 1646, 1647, 1649,
     1650, 1651, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1654, 1655,
     1656, 1658, 1660, 1661, 1662, 1666, 1667, 1668, 1669, 1670,
     1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1652,
     1681, 1682, 1683, 1685, 1686, 1688, 1689, 1653, 1690, 1691,
     1693, 1694, 1695, 1696, 1697, 1698, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1701, 1701, 1701, 1701, 1701, 1701,

     1701, 1701, 1703, 1704, 1705, 1706, 1710, 1711, 1712, 1713,
     1714, 1715, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
     1727, 1729, 1730, 1699, 1732, 1735, 1737, 1738, 1739, 1740,
     1741, 1701, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1752,
     1753, 1754, 1755, 1756, 1757, 1758, 1759, 1761, 1762, 1763,
     1764, 1766, 1769, 1772, 1775, 1776, 1778, 1779, 1780, 1781,
     1782, 1783, 1784, 1785, 1787, 1788, 1789, 1792, 1794, 1796,
     1797, 1798, 1800, 1802, 1803, 1808, 1809, 1812, 1813, 1814,
     1818, 1820, 1821,  760,  759,  758,  757, 1766, 1817,  756,
     1817, 1819,  755, 1819,  754,  753,  752,  751,  748,  747,

      746,  745,  744,  743,  742,  741,  740,  739,  738,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  721,  720,  719,  718,  717,  714,  704,
      702,  700,  699,  698,  697,  696,  695,  694,  693,  690,
      689,  688,  686,  685,  683,  682,  681,  680,  679,  678,
      677,  676,  675,  674,  672,  671,  670,  668,  667,  666,
      665,  659,  657,  656,  654,  653,  652,  651,  650,  648,
      647,  646,  645,  644,  643,  642,  641,  636,  635,  634,
      624,  623,  620,  619,  618,  617,  616,  615,  613,  612,
      611,  610,  609,  608,  607,  605,  604,  603,  602,  601,

      600,  599,  598,  597,  596,  595,  593,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  582,  581,  580,  579,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      563,  562,  561,  560,  558,  557,  556,  555,  554,  553,
      551,  550,  546,  545,  544,  543,  542,  541,  540,  539,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  513,  512,  511,  509,  508,  507,
      503,  502,  501,  499,  493,  492,  491,  490,  489,  488,
      486,  484,  483,  482,  481,  480,  479,  478,  477,  475,

      474,  473,  472,  470,  469,  467,  466,  465,  461,  460,
      459,  457,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  439,  437,  432,  430,  429,  428,
      427,  426,  422,  421,  420,  419,  416,  415,  414,  413,
      411,  406,  405,  404,  403,  402,  401,  400,  399,  398,
      396,  395,  394,  392,  391,  389,  388,  387,  385,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  372,  371,
      370,  369,  368,  366,  365,  364,  363,  362,  361,  358,
      357,  356,  355,  354,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  337,  336,

      334,  332,  331,  330,  329,  327,  326,  325,  324,  323,
      320,  319,  317,  314,  312,  311,  310,  309,  306,  303,
      302,  301,  300,  296,  295,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  278,  277,  276,  275,  274,
      273,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      261,  259,  258,  257,  256,  254,  253,  252,  251,  250,
      249,  248,  247,  246,  244,  243,  241,  240,  239,  238,
      237,  236,  235,  232,  231,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  215,  214,  213,  212,
      211,  210,  208,  207,  206,  202,  201,  200,  199,  198,

      197,  196,  195,  194,  192,  190,  189,  187,  186,  185,
      183,  182,  181,  180,  179,  178,  177,  176,  174,  173,
      172,  171,  170,  167,  164,  157,  155,  154,  151,  148,
      146,  144,  143,  142,  140,  139,  137,  136,  135,  133,
      132,  131,  130,  128,  122,  121,  120,  116,  114,  112,
      111,  109,  108,  106,  104,  103,  102,  101,   99,   98,
       96,   95,   93,   92,   91,   90,   89,   88,   87,   85,
       83,   82,   81,   80,   79,   78,   77,   65,   51,   42,
       41,   37,   24,   13,    9,    7,    3, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,

     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816, 1816,
     1816, 1816, 1816
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[408] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "Flex\\ScannerGLSL.l"
#define YY_NO_UNISTD_H 1
/* GLSL scanner */
#line 11 "Flex\\ScannerGLSL.l"
#line 1519 "Source\\SavvyScannerGLSL.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "Flex\\ScannerGLSL.l"


#line 1622 "Source\\SavvyScannerGLSL.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1817 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1988 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 28 "Flex\\ScannerGLSL.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 30 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 32 "Flex\\ScannerGLSL.l"
{ int c1 = 0, c2 = yyinput();
       for(;;) {
         if(c2 == EOF) break;
         if(c1 == '*' && c2 == '/')
           break;
         c1 = c2;
         c2 = yyinput();
       }
     }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "Flex\\ScannerGLSL.l"

	YY_BREAK
case 5:
YY_RULE_SETUP
#line 44 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BOOL_VALUE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 45 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BOOL_VALUE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 46 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 47 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 48 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 49 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 50 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 52 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 53 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 54 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 56 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 57 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 58 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 60 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 61 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 62 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 64 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 65 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 66 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 76 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 77 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 78 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 80 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 81 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 82 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 84 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 85 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 86 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 88 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 89 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 90 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 92 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 93 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 94 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 99 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 121 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 122 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 123 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 127 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 163 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 164 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 165 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 166 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 167 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 168 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 169 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 170 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 171 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 172 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 173 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 174 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 175 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 176 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 177 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 178 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 179 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 180 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 181 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 182 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 183 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 184 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 185 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 186 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 191 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 192 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 193 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 194 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 195 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 196 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 197 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 198 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 199 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 200 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 201 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 202 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 203 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 204 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 205 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 206 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 208 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 209 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 210 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 211 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 212 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 213 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 214 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 215 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 216 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_INSTRUCTION_END;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 217 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 218 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 219 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 220 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 221 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 222 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPEN_BRACKET;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 223 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CLOSE_BRACKET;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 224 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPEN_BRACE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 225 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CLOSE_BRACE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 226 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_OPEN_SQUARE_BRACKET;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 227 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CLOSE_SQUARE_BRACKET;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 228 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_IF_STATEMENT;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 229 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_ELSE_STATEMENT;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 230 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_SWITCH_STATEMENT;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 231 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BREAK_STATEMENT;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 232 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CASE_STATEMENT;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 233 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FOR_STATEMENT;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 234 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_DO_STATEMENT;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 235 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_WHILE_STATEMENT;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 236 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_CONTINUE_STATEMENT;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 238 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 239 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 240 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 241 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 242 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 243 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 244 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 245 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 246 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 247 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 248 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 249 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 250 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 251 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 252 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 253 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 254 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 255 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 256 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 257 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 258 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 259 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 260 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 261 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 262 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 263 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 264 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 265 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 266 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 267 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 268 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 269 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 270 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 271 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 272 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 273 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 274 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 275 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 276 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 277 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 278 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 279 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 280 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 281 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 282 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 283 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 284 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 285 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 286 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 287 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 288 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 289 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 290 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 291 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 292 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 293 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 294 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 295 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 296 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 297 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 298 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 299 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 300 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 301 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 302 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 303 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 304 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 305 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 306 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 307 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 308 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 309 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 310 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 311 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 312 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 313 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 314 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 315 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 316 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 317 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 318 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 319 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 320 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 321 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 322 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 323 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 324 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 325 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 326 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 327 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 328 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 329 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 330 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 331 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 332 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 333 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 334 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 335 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 336 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 337 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 338 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 339 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 340 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 341 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 342 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 343 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 344 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 345 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 346 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 347 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 348 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 349 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 350 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 351 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 352 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 353 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 354 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 355 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 356 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 357 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 358 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 359 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 360 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 361 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 362 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 363 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 364 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 365 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 366 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 367 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 368 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 369 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 370 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 371 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 372 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 373 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 374 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 375 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 376 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 377 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 378 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 379 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 380 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 381 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 382 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 383 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 384 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 385 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 386 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 387 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 388 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 389 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 390 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 391 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 392 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 393 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 394 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 395 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 396 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 397 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 398 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 399 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 400 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 401 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 403 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 404 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 405 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 406 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 407 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 408 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 409 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 410 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 411 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 412 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 413 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 414 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 415 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 416 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 417 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 418 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 419 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 420 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 421 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 422 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 423 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 424 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 425 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 426 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 427 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 428 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 429 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 430 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 431 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 432 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 433 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 434 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 435 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 436 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 437 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 438 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 439 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 440 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 441 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 442 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 443 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 444 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 445 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 446 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 447 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 448 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 449 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 450 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 451 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_RETURN_KEYWORD;
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 453 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_IDENTIFIER;
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 454 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 455 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 456 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 457 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 458 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 459 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 460 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 461 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 404:
/* rule 404 can match eol */
YY_RULE_SETUP
#line 462 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_NEW_LINE;
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 463 "Flex\\ScannerGLSL.l"

	YY_BREAK
case 406:
YY_RULE_SETUP
#line 464 "Flex\\ScannerGLSL.l"
return Savvy::SAVVY_UNKNOWN_TOKEN;
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 466 "Flex\\ScannerGLSL.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3759 "Source\\SavvyScannerGLSL.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	glslfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	glslfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					glslrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) glslrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1817 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1817 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1816);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) glslalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) glslalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		glslfree((void *) b->yy_ch_buf  );

	glslfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)glslalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)glslrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) glslalloc(new_size  );

		else
			(yy_start_stack) = (int *) glslrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *glslalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *glslrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void glslfree (void * ptr )
{
	free( (char *) ptr );	/* see glslrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 466 "Flex\\ScannerGLSL.l"


