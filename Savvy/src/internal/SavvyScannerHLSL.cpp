#line 2 "Source\\SavvyScannerHLSL.cpp"

#line 4 "Source\\SavvyScannerHLSL.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer hlslFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *hlslalloc (yy_size_t  );
void *hlslrealloc (void *,yy_size_t  );
void hlslfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include"SavvyScannerHLSL.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 345
#define YY_END_OF_BUFFER 346
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1671] =
    {   0,
        0,    0,  346,  344,  343,  342,   88,  344,  344,  117,
      114,  127,  128,  125,  122,  119,  123,  118,  126,  333,
      333,  120,  121,  116,  124,  115,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  131,  132,
      344,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      129,  111,  130,  110,  343,   90,    0,  341,    0,    0,
       99,  100,    0,    0,    0,    0,    0,    0,   95,  104,
       96,  102,   91,   93,   92,   94,   98,    2,    0,  103,
      335,  333,  339,  101,  113,  106,   89,  105,  112,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  109,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  139,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  133,
       35,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,   97,    0,  341,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    1,

      335,    0,  334,  339,  340,  108,  107,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  144,  332,  146,  149,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  161,  332,  332,  166,  169,  332,  332,  332,  177,
      332,  178,  332,  332,  332,  183,  332,  332,  332,  332,
      332,  332,  191,  332,  138,  332,  332,  332,  332,  332,
       19,  332,  332,  332,  332,  332,  332,  332,  215,  216,
      219,  332,  220,  221,  332,  332,  224,  332,  332,  332,
       36,  227,  332,  332,  240,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  248,  332,  332,  332,  332,  332,
      332,  332,  254,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,    0,    0,    0,    0,    0,   11,   11,
       11,    0,    0,    0,    0,    0,    0,  338,  340,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  142,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  145,  332,  332,  152,  332,
      155,   18,  332,  137,  332,  157,  332,  332,  160,  332,
      332,  162,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  134,  332,  184,  332,  332,  332,  332,  332,

      332,  332,  192,  193,  332,  332,   24,  332,   43,   44,
       45,  332,  332,  332,  332,  332,  214,  332,  332,  218,
      332,  332,  332,  222,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      247,  332,  250,  332,  332,  252,  332,  253,  332,  332,
      332,  255,  332,  332,  332,  332,  332,  332,   15,  332,
      332,   20,  332,  332,  332,   87,  332,    0,   14,    9,
        0,    0,   11,   11,    0,   12,    0,    0,  337,  336,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  143,  332,  332,  153,  332,  156,   49,   50,   51,
      136,  332,  332,  159,   30,  332,  332,  164,  332,  332,
      332,  332,  332,  332,  332,  332,  332,   23,  332,  332,
      332,  332,   16,  332,   21,  190,  194,  332,   37,  332,
      210,  211,  212,  332,  332,  217,  332,   32,   33,   34,
      223,  332,  225,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  244,  245,  332,  332,  332,  332,  277,  332,

      332,  332,  332,  256,  261,  266,  332,  332,  332,  274,
      332,   46,   47,   48,  332,  278,  332,  140,    0,   14,
        9,    7,   10,    5,   11,    0,   12,    0,    8,  332,
       86,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  284,  332,  332,
      332,  332,  154,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,   22,  179,  332,  332,  332,

      332,   39,   40,   41,  332,  195,  332,  213,  280,   55,
      332,  332,  332,  332,  332,  332,  332,  332,  228,  332,
      332,  332,  332,  276,  332,  332,  332,  249,  332,   31,
       17,   73,  135,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,   42,    4,    7,
       10,    5,    6,    0,   13,    8,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  151,
       84,  332,  332,  332,  332,  332,  332,  332,  172,  332,
      331,  332,   52,   53,   54,  332,  332,  332,  332,  332,
      332,  332,   69,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  239,  241,  242,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  268,
       74,  332,  279,   38,    4,    6,    3,   13,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  310,  332,  332,
      290,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  150,  281,  141,  332,
      332,  168,  332,  171,  332,  176,  332,  332,  332,  185,
      186,  332,  332,   55,   56,   57,   62,   61,   63,   68,
       67,  209,  332,  332,   28,  332,   29,  332,  332,  332,
      330,  332,  332,  332,  332,  246,  332,  332,  332,  259,
      332,  332,  332,  264,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  326,  332,  327,  332,  332,  332,
      332,  332,  332,  332,  332,   75,   76,   78,  332,  163,
      332,  332,  332,   58,   59,   60,   65,   64,   66,   71,
       72,   70,  332,  332,  332,  332,  332,  332,  332,  332,
      226,  332,   80,   81,   82,  332,  257,  258,  260,  262,
      263,  265,  267,  332,  332,  332,  332,  273,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  313,  332,  332,  332,  332,  293,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,    0,  332,    0,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  167,  170,  332,  332,
      332,  332,   26,   25,   27,  332,  332,  332,  251,  332,
      332,  271,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  309,  332,  332,
      289,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  306,  332,
      286,  332,  332,  332,  332,  332,    0,  329,  332,    0,

      328,  332,  325,  332,  305,  332,  285,  332,  332,  332,
       79,  173,  187,  332,  189,  332,  332,  243,  269,  270,
      272,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,   83,
      332,  332,  188,  332,  332,  332,  332,  332,  332,  332,
      275,  332,  332,  332,  332,  332,  332,  332,  332,  207,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  314,  332,  332,  332,  294,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  322,  302,  332,  332,  332,  332,  332,  283,  332,
      332,  332,  332,  332,  332,  332,  200,  201,  332,  332,
      205,  206,  208,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      318,  332,  298,  332,  332,  324,  304,  332,  332,  321,
      301,  332,  332,  332,   77,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  316,  296,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      282,  147,  332,  165,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,    0,    0,    0,    0,  332,  332,
      332,  332,  315,  295,  332,  332,  332,  332,  332,  332,
      332,  332,   85,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,    0,  307,    0,  308,    0,
      287,    0,  288,  332,  312,  332,  292,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  198,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      174,  332,  332,  332,  332,  332,  332,  204,  332,  332,
      332,  332,  311,  291,  317,  297,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      323,  303,  332,  158,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  203,  332,  332,  332,  332,  332,  332,  332,  319,

      299,  332,  332,  332,  332,  332,  332,  182,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  236,  237,  238,
      332,  332,  332,  332,  332,  181,  332,  332,  332,  332,
      332,  332,  232,  233,  234,  235,  320,  300,  332,  332,
      332,  196,  332,  332,  202,  332,  332,  332,  332,  332,
      180,  332,  332,  229,  230,  231,  332,  332,  332,  332,
      148,  332,  197,  332,  332,  332,  332,  199,  175,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   23,   23,   23,   25,   26,   27,
       28,   29,    1,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   40,
       55,   56,   57,   58,   59,    1,   60,   61,   62,   63,

       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   85,   86,   87,   88,   89,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[90] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1688] =
    {   0,
        0,    0, 1904, 1905,   88, 1905, 1875,   85,   89, 1874,
       85, 1905, 1905, 1873,   82, 1905,   83, 1905,   87,  102,
      111, 1875, 1905,   73, 1871,   74, 1827, 1817, 1829,   76,
     1814,    0,   72, 1821, 1819, 1815,   77, 1827, 1905, 1905,
     1862,   97,   31,  113,  115,   67,  142, 1829,   89,  118,
      120, 1814, 1807,   32,  143,  136,  162,   74,   43, 1819,
     1905, 1857, 1905, 1905,  112, 1905,  139, 1905,  145,  167,
     1905, 1905, 1820,  152,  126, 1815, 1805, 1808, 1905, 1905,
     1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905,    0, 1905,
      230,  239,  246, 1905, 1852, 1905, 1905, 1905, 1851,    0,

     1807, 1812, 1812, 1841, 1793, 1813, 1793, 1797, 1791, 1809,
     1794, 1808, 1794, 1788, 1781, 1905,   65, 1789, 1791, 1777,
      208, 1800, 1785, 1794, 1779, 1776,  138,  160,  154, 1781,
       82,  177, 1776,  157, 1774, 1778, 1773, 1773, 1774, 1824,
     1827,   84, 1769, 1771,  212, 1767,  180, 1775, 1771,    0,
      200,  210, 1777,  168,  208, 1774,  214, 1766, 1775, 1777,
     1765,  214, 1756, 1752, 1765, 1769, 1756,  219, 1750, 1753,
      220,  230, 1754, 1753, 1749,  241, 1757, 1751, 1740,  230,
     1747, 1748,  234, 1758, 1751, 1750, 1905,  274,  298,  303,
     1752,  239, 1753, 1738,  248, 1752, 1740, 1752, 1748,    0,

      304,  316, 1905,  323,    0, 1905, 1905, 1768, 1744, 1746,
     1774, 1738, 1734,  285, 1724, 1739, 1739, 1739,  316, 1725,
     1719, 1719, 1720,    0, 1718,    0,    0, 1721, 1723, 1720,
     1724, 1718, 1719, 1729, 1724, 1722, 1715, 1706, 1712, 1708,
      234, 1715, 1708, 1702, 1720, 1719, 1700, 1712,  254,    0,
     1714,    0, 1697, 1709, 1698, 1751, 1691, 1690, 1704, 1689,
     1688,  288,    0, 1702,    0, 1702, 1680, 1699, 1696, 1680,
      336, 1691, 1685, 1697, 1673, 1689, 1679, 1689,    0,  295,
        0, 1675,    0,  351, 1686, 1687,    0,  293, 1685, 1676,
        0,    0, 1674, 1678,    0,  302, 1677, 1664, 1679, 1669,

     1664, 1665, 1659, 1665,  313, 1663, 1659, 1656, 1655, 1658,
      306, 1653, 1664,  357, 1657,  318, 1665, 1649, 1662, 1649,
     1646, 1661, 1652, 1654, 1656, 1656, 1651, 1644,    0, 1653,
     1653, 1644, 1650, 1647, 1648,  374,  381,  388,    0, 1647,
     1646, 1639, 1664, 1645, 1626, 1637, 1640, 1628, 1625,    0,
     1637,  372,  380,  304,  377,  334,  379,  353,  358,  397,
      394, 1629, 1637, 1618, 1618,    0, 1616, 1621, 1615, 1620,
     1672,  417, 1621,    0, 1625,    0, 1612, 1613,    0, 1608,
     1618,    0, 1606, 1606,  365,  369, 1619, 1605, 1621, 1620,
     1608, 1615,    0, 1600,    0, 1602, 1601, 1609, 1609, 1593,

     1592, 1593,    0,    0, 1594, 1589,    0, 1588,    0,    0,
        0, 1593, 1600, 1591, 1588, 1583,    0, 1601, 1642,    0,
     1591,  417, 1638,    0, 1635, 1577, 1591, 1577, 1593, 1573,
     1591, 1586, 1589, 1570, 1570, 1569, 1582, 1565, 1572, 1565,
        0, 1567,    0, 1561, 1567,    0, 1570,    0, 1564, 1574,
     1573,    0, 1600, 1599, 1598, 1581, 1550, 1551,    0, 1566,
     1564,  443, 1552, 1553, 1550,    0, 1559, 1549,    0,    0,
     1556, 1543, 1554, 1554, 1537,    0, 1544, 1550,  448,  455,
     1542, 1536, 1581, 1570, 1546, 1549, 1536, 1534, 1564, 1534,
     1526, 1564, 1551, 1560, 1532, 1518, 1527, 1552, 1548, 1553,

     1519, 1515, 1520, 1547, 1551, 1515, 1540, 1551, 1508, 1549,
     1535, 1504, 1534, 1542, 1502, 1511, 1535, 1504, 1534, 1503,
     1527, 1525, 1495, 1493, 1523, 1534, 1491, 1503, 1502, 1486,
     1487,    0, 1502, 1502,    0, 1482,    0,    0,    0,    0,
        0, 1496, 1485,    0,    0, 1485, 1496,    0, 1482, 1487,
     1480, 1485, 1488, 1479, 1473, 1476, 1484,    0, 1482, 1481,
     1480, 1470,    0, 1482,  460,    0,    0, 1475,    0, 1473,
        0,    0,    0, 1473, 1462,    0, 1455, 1472,  377,  418,
        0, 1472,    0, 1457, 1463, 1468, 1459, 1469, 1468, 1450,
     1455, 1449,    0,    0, 1462, 1465, 1446, 1456,    0, 1460,

     1455, 1441, 1452,  423,  424, 1443, 1485, 1439, 1440,    0,
     1450,    0,    0,    0, 1436,    0, 1435,    0, 1447,    0,
        0,    0,    0,    0, 1445, 1446,    0, 1448,    0, 1433,
        0, 1444, 1461, 1462, 1424, 1438, 1438, 1436, 1425, 1420,
     1452, 1461, 1454, 1419, 1429, 1421, 1442, 1445, 1458, 1409,
     1412, 1426, 1435,  378, 1404, 1444, 1435, 1413, 1403, 1434,
     1403, 1438, 1434, 1407, 1402, 1439, 1409, 1426, 1395, 1432,
     1420, 1401, 1388, 1416, 1412, 1384, 1380,  419, 1381, 1396,
     1388, 1379,    0, 1380, 1388, 1375, 1386, 1393, 1379, 1391,
     1377, 1371, 1380, 1384, 1384,  471,    0, 1424, 1425, 1366,

     1374, 1358, 1357, 1356, 1417,    0, 1358,    0,    0,    0,
     1365, 1364, 1361, 1362, 1359, 1354, 1355, 1361,    0, 1350,
     1348, 1347, 1361,    0, 1360, 1346, 1343,    0, 1343,    0,
        0,    0,    0, 1352, 1342, 1344, 1340, 1348, 1337, 1337,
     1331, 1328, 1367, 1335, 1322, 1328, 1318,    0,    0,    0,
        0,    0,    0, 1323,    0,    0,   95,  171,  273,  319,
      321,  314,  376,  375,  387,  467,  425,  441,  463,  466,
      424,  468,  465,  473,  466,  440,  448,  441,  465,  463,
      434,  439,  481,  473,  455,  445,  470,  441,  473,  484,
      445,  457,  491,  463,  487,  458,  495,  495,  468,  497,

      499,  490,  472,  462,  474,  491,  463,  525,  477,    0,
        0,  479,  483,  469,  472,  486,  474,  488,    0,  480,
        0,  490,  472,  473,  474,  539,  536,  479,  483,  543,
      546,  549,    0,  506,  498,  499,  495,  501,  497,  502,
      514,  494,    0,    0,    0,  503,  520,  563,  521,  507,
      527,  528,  526,  516,  531,  532,  530,  520,  521,  535,
        0,  519,    0,    0,    0,    0, 1905,    0,  514,  535,
      521,  530,  572,  526,  528,  533,  538,  575,  533,  532,
      536,  575,  584,  577,  549,  558,  551,    0,  571,  578,
        0,  543,  550,  585,  576,  547,  588,  593,  586,  566,

      558,  583,  554,  596,  587,  570,  560,  593,  564,  607,
      579,  595,  614,  567,  587,  595,  605,  567,  577,  571,
      574,  590,  621,  622,  623,  578,    0,    0,    0,  581,
      582,    0,  583,    0,  602,    0,  643,  646,  649,    0,
        0,  612,  606,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  614,  615,    0,  616,    0,  604,  617,  616,
        0,  613,  648,  649,  650,    0,  621,  608,  624,    0,
      619,  611,  627,    0,  622,  623,  625,  617,  621,  619,
      633,  666,  621,  626,  627,  623,  635,  655,  628,  642,
      661,  634,  649,  642,  663,  675,  665,  636,  649,  638,

      684,  677,  657,  679,  687,  684,  692,  664,  691,  659,
      678,  679,  680,  652,  699,  700,  690,  696,  662,  669,
      689,  690,  701,  702,  687,  710,  689,  683,  707,  700,
      709,  672,  686,  691,  689,    0,  722,    0,  693,    0,
      691,  692,  684,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  681,  691,  686,  682,  683,  684,  694,  687,
        0,  688,    0,    0,    0,  693,    0,    0,    0,    0,
        0,    0,    0,  709,  710,  708,  698,    0,  713,  696,
      725,  699,  698,  704,  719,  696,  718,  702,  712,  721,
      736,  737,  752,  739,  710,  726,  712,  754,  749,  727,

      721,    0,  762,  750,  755,  726,    0,  737,  724,  767,
      767,  740,  769,  762,  733,  765,  758,  737,  730,  781,
      753,  771,  742,  798,  774,  806,  752,  798,  784,  800,
      756,  765,  758,  806,  762,  776,    0,    0,  762,  779,
      777,  762,    0,    0,    0,  785,  778,  769,    0,  770,
      786,    0,  781,  774,  816,  821,  770,  779,  784,  781,
      827,  829,  801,  797,  817,  803,  837,    0,  838,  810,
        0,  812,  825,  842,  827,  815,  843,  844,  847,  819,
      819,  820,  837,  855,  809,  828,  846,  817,    0,  856,
        0,  828,  846,  817,  861,  833,  879, 1905,  860,  887,

     1905,  838,    0,  882,    0,  883,    0,  851,  836,  840,
        0,    0,    0,  851,    0,  840,  839,    0,    0,    0,
        0,  844,  842,  869,  892,  857,  848,  861,  868,  866,
      856,  848,  872,  856,  860,  872,  864,  874,  863,  899,
      900,  872,  873,  909,  917,  882,  890,  898,  921,  918,
      890,  872,  896,  909,  925,  881,  898,  912,  883,  924,
      925,  928,  900,  932,  904,  922,  893,  924,  895,    0,
      908,  914,    0,  907,  912,  909,  907,  930,  920,  920,
        0,  918,  906,  921,  922,  914,  925,  905,  916,    0,
      913,  942,  928,  915,  916,  962,  963,  935,  936,  952,

      951,  924,  923,    0,  969,  965,  966,    0,  943,  971,
      973,  973,  946,  964,  935,  979,  980,  980,  952,  964,
      935,    0,    0,  972,  943,  956,  938,  949,    0,  960,
      954,  991,  950,  948,  950,  953,    0,    0,  956,  965,
        0,    0,    0,  969,  985,  957, 1000, 1002, 1003,  975,
      976, 1006, 1003,  979,  976, 1006, 1012, 1013, 1009, 1018,
        0,  990,    0, 1007,  978,    0,    0, 1004,  975,    0,
        0, 1024,  996,  993,    0,  985,  982,  976, 1039,  985,
      984, 1016,  997, 1006, 1007,  990, 1005, 1034, 1011, 1017,
     1018, 1019, 1020, 1045, 1033, 1018, 1005, 1046,    0,    0,

     1047, 1049, 1021, 1043, 1014, 1055, 1056, 1034, 1005, 1013,
        0, 1039, 1050,    0, 1025, 1030, 1035, 1032, 1020, 1025,
     1021, 1022, 1041, 1040, 1085, 1092, 1099, 1106, 1097, 1089,
     1070, 1061,    0,    0, 1086, 1057, 1092, 1093, 1092, 1063,
     1102, 1104,    0, 1076, 1085, 1082, 1116, 1076, 1073, 1087,
     1086, 1117, 1076, 1093, 1078, 1147, 1905, 1154, 1905, 1161,
     1905, 1168, 1905, 1119,    0, 1120,    0, 1116, 1087, 1118,
     1119, 1147, 1118, 1153, 1124, 1119, 1124, 1123, 1122, 1129,
     1128, 1153, 1171, 1143, 1148, 1173, 1131, 1138, 1179, 1180,
     1168, 1139, 1178, 1152, 1190, 1162, 1189, 1161, 1159, 1152,

     1176, 1196, 1170, 1160, 1164, 1150, 1155,    0, 1173, 1176,
     1163, 1161,    0,    0,    0,    0, 1196, 1167, 1187, 1158,
     1208, 1181, 1209, 1183, 1180, 1185, 1190, 1176, 1188, 1174,
     1192, 1181, 1177, 1195, 1181, 1181, 1211, 1182, 1223, 1224,
     1211, 1182, 1189, 1204, 1189, 1196, 1198, 1196, 1239, 1206,
     1207, 1198, 1202, 1198, 1200, 1248, 1241, 1242, 1239, 1210,
        0,    0, 1211,    0, 1219, 1208, 1213, 1225, 1217, 1218,
     1256, 1234, 1231, 1219, 1223, 1267, 1218, 1240, 1267, 1268,
     1269, 1241, 1225, 1269, 1230, 1239, 1248, 1232, 1235, 1237,
     1242,    0, 1238, 1240, 1237, 1259, 1254, 1238, 1249,    0,

        0, 1288, 1260, 1250, 1249, 1254, 1265,    0, 1257, 1263,
     1258, 1267, 1303, 1257, 1270, 1254, 1265,    0,    0,    0,
     1286, 1257, 1293, 1268, 1275,    0, 1265, 1267, 1267, 1284,
     1268, 1290,    0,    0,    0,    0,    0,    0, 1267, 1272,
     1290,    0, 1286, 1280,    0, 1290, 1274, 1286, 1287, 1286,
        0, 1288, 1315,    0,    0,    0, 1302, 1317, 1293, 1283,
        0, 1284,    0, 1296, 1297, 1309, 1310,    0,    0, 1905,
     1372, 1373, 1376, 1379, 1378, 1382, 1381, 1385, 1388, 1391,
     1394, 1397, 1400, 1403, 1406, 1409, 1412
    } ;

static yyconst flex_int16_t yy_def[1688] =
    {   0,
     1670,    1, 1670, 1670, 1670, 1670, 1670, 1671, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1670, 1670,
     1670, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1670, 1670, 1670, 1670, 1670, 1670, 1671, 1670, 1673, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1674, 1670,
     1670, 1670, 1675, 1670, 1670, 1670, 1670, 1670, 1670, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1670, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1670, 1671, 1671, 1673,
     1670, 1670, 1670, 1670, 1676, 1670, 1670, 1670, 1670, 1674,

     1670, 1670, 1670, 1670, 1677, 1670, 1670, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1670, 1670, 1670, 1670, 1670, 1676, 1676,
     1676, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1677, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1670, 1678, 1679,
     1670, 1670, 1676, 1676, 1670, 1680, 1670, 1670, 1670, 1670,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1670, 1678,
     1679, 1681, 1682, 1683, 1676, 1670, 1680, 1670, 1684, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1685, 1681,
     1682, 1683, 1686, 1670, 1687, 1684, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1685, 1686, 1670, 1687, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1670, 1672, 1670, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1670, 1670, 1672, 1670,

     1670, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1670, 1670, 1670, 1670, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,    0,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670
    } ;

static yyconst flex_int16_t yy_nxt[1995] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   23,   24,   25,   26,    4,
       27,   28,   29,   30,   31,   32,   33,   32,   34,   32,
       35,   32,   32,   32,   36,   32,   32,   37,   38,   32,
       32,   32,   32,   32,   39,    4,   40,   41,   32,   42,
       43,   44,   45,   46,   47,   32,   48,   49,   32,   32,
       50,   51,   52,   53,   54,   32,   55,   56,   57,   58,
       59,   60,   32,   32,   32,   61,   62,   63,   64,   65,
       68,   65,   70,   80,   83,   71,  104,   85,   88,   95,

       96,   98,   99,   89,  123,  164,  184,  124,  165,   84,
       86,   87,   81,   65,   90,   65,  185,   91,   72,   92,
       92,   92,   92,   92,   92,   92,   91,  112,   92,   92,
       92,   92,   92,   92,   92,  107,  113,  137,  223,  105,
       69,  182,  224,  138,   68,  259,  183,   67,  108,  139,
      189,   73,   74,  150,  260,  114,   75,  117,  118,   76,
      140,  151,  141,   77,  245,  246,  152,  119,   78,  120,
       70,  869,  125,  126,  121,  122,  127,  131,  132,  157,
      153,  154,  133,  128,   93,  155,  129,  158,  134,  130,
      195,  156,  135,  159,   69,  171,  136,  160,  196,  161,

      190,  142,  166,  172,  167,  237,  168,  173,  174,  143,
      238,  175,  144,  145,  176,  146,  169,  177,  147,  239,
      170,  178,  192,  148,  193,  179,  241,  240,  194,   73,
       74,  242,  870,  243,   75,  250,  251,   76,  180,  266,
      276,   77,  247,  267,  277,  181,   78,  201,  201,  201,
      201,  201,  201,  201,   91,  248,   92,   92,   92,   92,
       92,   92,   92,  204,  204,  204,  204,  204,  204,  204,
      228,  263,  229,  270,  272,  230,  281,  273,  271,   68,
      278,  288,  274,  296,  297,  264,  279,  231,  289,  315,
      290,  302,  282,  202,  203,  304,  283,  298,  303,  299,

      309,  319,  305,   68,  310,   67,  325,  320,  189,  316,
      330,  380,  381,  419,  420,  389,  326,  311,  346,  871,
      331,  201,  201,  201,  201,  201,  201,  201,  336,   69,
      337,  347,  390,  338,  338,  338,  338,  338,  338,  338,
      204,  204,  204,  204,  204,  204,  204,  401,  352,  353,
      504,  505,  354,   69,  355,  409,  410,  411,  190,  356,
      357,  402,  358,  359,  360,  426,  361,  202,  203,  422,
      427,  423,  432,  449,  442,  453,  454,  455,  433,  443,
      506,  459,  872,  511,  873,  450,  874,  517,  519,  456,
      460,  479,  479,  479,  479,  479,  479,  479,  480,  480,

      480,  480,  480,  480,  480,  338,  338,  338,  338,  338,
      338,  338,  492,  512,  498,  493,  518,  520,  499,  507,
      780,  494,  513,  500,  508,  514,  549,  521,  525,  550,
      551,  522,  526,  552,  578,  457,  538,  539,  540,  875,
      579,  712,  495,  501,  713,  496,  876,  502,  877,  509,
      781,  497,  515,  503,  510,  516,  523,  527,  882,  805,
      524,  528,  612,  613,  614,  479,  479,  479,  479,  479,
      479,  479,  480,  480,  480,  480,  480,  480,  480,  702,
      703,  704,  714,  734,  738,  715,  878,  883,  735,  739,
      823,  824,  825,  736,  740,  806,  884,  737,  741,  885,

      886,  887,  888,  889,  890,  879,  891,  892,  893,  894,
      895,  896,  880,  897,  898,  881,  899,  900,  901,  902,
      903,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  915,  916,  917,  918,  919,  920,  921,  922,
      927,  928,  705,  923,  924,  925,  929,  930,  931,  932,
      933,  934,  935,  936,  937,  938,  939,  926,  940,  941,
      942,  943,  944,  945,  946,  947,  948,  949,  950,  952,
      951,  953,  954,  955,  956,  957,  958,  959,  960,  961,
      962,  963,  964,  965,  966,  967,  968,  969,  970,  971,
      972,  973,  974,  975,  976,  977,  981,  982,  983,  984,

      978,  985,  986,  987,  988,  979,  989,  990,  991,  980,
      992,  993,  994,  995,  996,  997,  998,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1007, 1008, 1009, 1011, 1012, 1013,
     1014, 1015, 1016, 1006, 1017, 1018, 1010, 1019, 1020, 1021,
     1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
     1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
     1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
     1052, 1053, 1054, 1056, 1057, 1058, 1055, 1059, 1060, 1061,
     1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
     1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,

     1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
     1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
     1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1103,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
     1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
     1143, 1144, 1145, 1108, 1146, 1147, 1148, 1149, 1150, 1151,
     1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
     1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,

     1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
     1192, 1193, 1194, 1195, 1196, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1199, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
     1222, 1223, 1224, 1225, 1198, 1226, 1227, 1228, 1229, 1230,
     1236, 1231, 1201, 1232, 1237, 1238, 1239, 1240, 1241, 1242,
     1233, 1243, 1234, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
     1251, 1235, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1266, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
     1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1286,
     1287, 1288, 1290, 1291, 1292, 1198, 1293, 1294, 1285, 1289,
     1295, 1296, 1297, 1201, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,

     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
     1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
     1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
     1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
     1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
     1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,

     1454, 1455, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473,
     1474, 1457, 1475, 1476, 1477, 1478, 1479, 1481, 1459, 1482,
     1483, 1484, 1485, 1486, 1487, 1461, 1488, 1489, 1490, 1491,
     1492, 1493, 1463, 1480, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501,

     1502, 1503, 1504, 1457, 1505, 1506, 1508, 1509, 1510, 1511,
     1459, 1512, 1513, 1514, 1515, 1516, 1517, 1461, 1507, 1518,
     1519, 1520, 1521, 1522, 1463, 1523, 1524, 1525, 1526, 1528,
     1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
     1539, 1540, 1541, 1527, 1542, 1543, 1544, 1545, 1546, 1547,
     1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
     1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
     1568, 1569, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1579,
     1580, 1581, 1582, 1570, 1583, 1584, 1585, 1586, 1587, 1578,
     1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1597, 1598,

     1600, 1601, 1602, 1603, 1604, 1605, 1606, 1599, 1596, 1607,
     1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1618,
     1619, 1620, 1621, 1622, 1623, 1624, 1617, 1625, 1626, 1627,
     1628, 1629, 1630, 1631, 1633, 1634, 1635, 1636, 1637, 1638,
     1639, 1640, 1641, 1642, 1632, 1643, 1644, 1645, 1646, 1647,
     1649, 1650, 1651, 1652, 1653, 1654, 1655, 1648, 1656, 1657,
     1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
     1668, 1669,   67,   67,   67,  100,  188,  188,  188,  200,
      205,  200,  329,  339,  329,  620,  867,  620,  621,  864,
      621,  627,  863,  627,  750,  862,  750,  751,  861,  751,

      752,  860,  752,  756,  859,  756,  865,  858,  865,  866,
      857,  866,  868,  856,  868,  855,  854,  853,  852,  851,
      850,  849,  848,  847,  846,  845,  844,  843,  842,  841,
      840,  839,  838,  837,  836,  835,  834,  833,  832,  831,
      830,  829,  828,  827,  826,  822,  821,  820,  819,  818,
      817,  816,  815,  814,  813,  812,  811,  810,  809,  808,
      807,  804,  803,  802,  801,  800,  799,  798,  797,  796,
      795,  794,  793,  792,  791,  790,  789,  788,  787,  786,
      785,  784,  783,  782,  779,  778,  777,  776,  775,  774,
      773,  772,  771,  770,  769,  768,  767,  766,  765,  764,

      763,  762,  761,  760,  759,  758,  757,  755,  754,  753,
      749,  748,  747,  746,  745,  744,  743,  742,  733,  732,
      731,  730,  729,  728,  727,  726,  725,  724,  723,  722,
      721,  720,  719,  718,  717,  716,  711,  710,  709,  708,
      707,  706,  701,  700,  699,  698,  697,  696,  695,  694,
      693,  692,  691,  690,  689,  688,  687,  686,  685,  684,
      683,  682,  681,  680,  679,  678,  677,  676,  675,  674,
      673,  672,  671,  670,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  659,  658,  657,  656,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,

      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  626,  625,  624,  623,
      622,  619,  618,  617,  616,  615,  611,  610,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  548,  547,  546,  545,  544,  543,  542,
      541,  537,  536,  535,  534,  533,  532,  531,  530,  529,

      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  458,
      452,  451,  448,  447,  446,  445,  444,  441,  440,  439,
      438,  437,  436,  435,  434,  431,  430,  429,  428,  425,
      424,  421,  418,  417,  416,  415,  414,  413,  412,  408,
      407,  406,  405,  404,  403,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  388,  387,  386,  385,  384,
      383,  382,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,

      351,  350,  349,  348,  345,  344,  343,  342,  341,  340,
      335,  334,  333,  332,  328,  327,  324,  323,  322,  321,
      318,  317,  314,  313,  312,  308,  307,  306,  301,  300,
      295,  294,  293,  292,  291,  287,  286,  285,  284,  280,
      275,  269,  268,  265,  262,  261,  258,  257,  256,  255,
      254,  253,  252,  249,  244,  236,  235,  234,  233,  232,
      227,  226,  225,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  210,  209,  208,  207,  206,
      199,  198,  197,  191,  187,  186,  163,  162,  149,  116,
      115,  111,  110,  109,  106,  103,  102,  101,   97,   94,

       82,   79,   66, 1670,    3, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670

    } ;

static yyconst flex_int16_t yy_chk[1995] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        8,    5,    9,   11,   15,    9,   30,   17,   19,   24,

       24,   26,   26,   19,   43,   54,   59,   43,   54,   15,
       17,   17,   11,   65,   19,   65,   59,   20,    9,   20,
       20,   20,   20,   20,   20,   20,   21,   37,   21,   21,
       21,   21,   21,   21,   21,   33,   37,   46,  117,   30,
        8,   58,  117,   46,   67,  142,   58,   69,   33,   46,
       69,    9,    9,   49,  142,   37,    9,   42,   42,    9,
       47,   49,   47,    9,  131,  131,   49,   42,    9,   42,
       70,  757,   44,   44,   42,   42,   44,   45,   45,   51,
       50,   50,   45,   44,   20,   50,   44,   51,   45,   44,
       75,   50,   45,   51,   67,   56,   45,   51,   75,   51,

       69,   47,   55,   56,   55,  127,   55,   56,   56,   47,
      127,   56,   47,   47,   56,   47,   55,   56,   47,  128,
       55,   57,   74,   47,   74,   57,  129,  128,   74,   70,
       70,  129,  758,  129,   70,  134,  134,   70,   57,  147,
      154,   70,  132,  147,  154,   57,   70,   91,   91,   91,
       91,   91,   91,   91,   92,  132,   92,   92,   92,   92,
       92,   92,   92,   93,   93,   93,   93,   93,   93,   93,
      121,  145,  121,  151,  152,  121,  157,  152,  151,  188,
      155,  162,  152,  168,  168,  145,  155,  121,  162,  180,
      162,  171,  157,   91,   91,  172,  157,  168,  171,  168,

      176,  183,  172,  189,  176,  190,  192,  183,  190,  180,
      195,  241,  241,  280,  280,  249,  192,  176,  214,  759,
      195,  201,  201,  201,  201,  201,  201,  201,  202,  188,
      202,  214,  249,  202,  202,  202,  202,  202,  202,  202,
      204,  204,  204,  204,  204,  204,  204,  262,  219,  219,
      354,  354,  219,  189,  219,  271,  271,  271,  190,  219,
      219,  262,  219,  219,  219,  288,  219,  201,  201,  284,
      288,  284,  296,  311,  305,  314,  314,  314,  296,  305,
      354,  316,  760,  356,  761,  311,  762,  358,  359,  314,
      316,  336,  336,  336,  336,  336,  336,  336,  337,  337,

      337,  337,  337,  337,  337,  338,  338,  338,  338,  338,
      338,  338,  352,  356,  353,  352,  358,  359,  353,  355,
      654,  352,  357,  353,  355,  357,  385,  360,  361,  385,
      386,  360,  361,  386,  422,  314,  372,  372,  372,  763,
      422,  579,  352,  353,  579,  352,  764,  353,  765,  355,
      654,  352,  357,  353,  355,  357,  360,  361,  767,  678,
      360,  361,  462,  462,  462,  479,  479,  479,  479,  479,
      479,  479,  480,  480,  480,  480,  480,  480,  480,  565,
      565,  565,  580,  604,  605,  580,  766,  768,  604,  605,
      696,  696,  696,  604,  605,  678,  769,  604,  605,  770,

      771,  772,  773,  774,  775,  766,  776,  777,  778,  779,
      780,  781,  766,  782,  783,  766,  784,  785,  786,  787,
      788,  789,  790,  791,  792,  793,  794,  795,  796,  797,
      798,  799,  800,  801,  802,  803,  804,  805,  806,  807,
      809,  812,  565,  808,  808,  808,  813,  814,  815,  816,
      817,  818,  820,  822,  823,  824,  825,  808,  826,  827,
      828,  829,  830,  830,  830,  831,  831,  831,  832,  834,
      832,  835,  836,  837,  838,  839,  840,  841,  842,  846,
      847,  848,  848,  848,  849,  850,  851,  852,  853,  854,
      855,  856,  857,  858,  859,  860,  862,  869,  870,  871,

      860,  872,  873,  874,  875,  860,  876,  877,  878,  860,
      879,  880,  881,  882,  883,  884,  885,  886,  887,  889,
      890,  892,  893,  894,  895,  896,  897,  898,  899,  900,
      901,  902,  903,  894,  904,  905,  897,  906,  907,  908,
      909,  910,  911,  912,  913,  914,  915,  916,  917,  918,
      919,  920,  921,  922,  923,  924,  925,  926,  930,  931,
      933,  935,  937,  937,  937,  938,  938,  938,  939,  939,
      939,  942,  943,  953,  954,  956,  943,  958,  959,  960,
      962,  963,  964,  965,  967,  968,  969,  971,  972,  973,
      975,  976,  977,  978,  979,  980,  981,  982,  983,  984,

      985,  986,  987,  988,  989,  990,  991,  992,  993,  994,
      995,  996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004,
     1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1005,
     1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
     1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
     1034, 1035, 1037, 1039, 1041, 1042, 1043, 1053, 1054, 1055,
     1056, 1057, 1058, 1009, 1059, 1060, 1062, 1066, 1074, 1075,
     1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
     1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
     1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1108,

     1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
     1119, 1120, 1121, 1122, 1123, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1125, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
     1139, 1140, 1141, 1142, 1146, 1147, 1148, 1150, 1151, 1153,
     1154, 1155, 1156, 1157, 1124, 1158, 1159, 1160, 1161, 1162,
     1163, 1162, 1126, 1162, 1164, 1165, 1166, 1167, 1169, 1170,
     1162, 1172, 1162, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1162, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
     1190, 1192, 1193, 1194, 1195, 1196, 1197, 1197, 1197, 1197,

     1197, 1197, 1197, 1199, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1202, 1204, 1206, 1208, 1209, 1210, 1214, 1216, 1217,
     1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
     1232, 1233, 1234, 1235, 1236, 1197, 1237, 1238, 1230, 1233,
     1239, 1240, 1241, 1200, 1242, 1243, 1244, 1245, 1246, 1247,
     1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
     1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
     1268, 1269, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279,
     1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1291,
     1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,

     1302, 1303, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1324, 1325,
     1326, 1327, 1328, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
     1339, 1340, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
     1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1362,
     1364, 1365, 1368, 1369, 1372, 1373, 1374, 1376, 1377, 1378,
     1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
     1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
     1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
     1412, 1413, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,

     1423, 1424, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1429, 1430, 1431, 1432, 1435, 1436, 1437, 1438, 1439, 1440,
     1441, 1425, 1442, 1444, 1445, 1446, 1447, 1448, 1426, 1449,
     1450, 1451, 1452, 1453, 1454, 1427, 1455, 1464, 1466, 1468,
     1469, 1470, 1428, 1447, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,

     1479, 1480, 1481, 1456, 1482, 1483, 1484, 1485, 1486, 1487,
     1458, 1488, 1489, 1490, 1491, 1492, 1493, 1460, 1483, 1494,
     1495, 1496, 1497, 1498, 1462, 1499, 1500, 1501, 1502, 1503,
     1504, 1505, 1506, 1507, 1509, 1510, 1511, 1512, 1517, 1518,
     1519, 1520, 1521, 1502, 1522, 1523, 1524, 1525, 1526, 1527,
     1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
     1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
     1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
     1558, 1559, 1560, 1549, 1563, 1565, 1566, 1567, 1568, 1556,
     1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,

     1579, 1580, 1581, 1582, 1583, 1584, 1585, 1578, 1576, 1586,
     1587, 1588, 1589, 1590, 1591, 1593, 1594, 1595, 1596, 1597,
     1598, 1599, 1602, 1603, 1604, 1605, 1596, 1606, 1607, 1609,
     1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1621, 1622,
     1623, 1624, 1625, 1627, 1613, 1628, 1629, 1630, 1631, 1632,
     1639, 1640, 1641, 1643, 1644, 1646, 1647, 1632, 1648, 1649,
     1650, 1652, 1653, 1657, 1658, 1659, 1660, 1662, 1664, 1665,
     1666, 1667, 1671, 1671, 1671, 1672, 1673, 1673, 1673, 1674,
     1675, 1674, 1676, 1677, 1676, 1678,  754, 1678, 1679,  747,
     1679, 1680,  746, 1680, 1681,  745, 1681, 1682,  744, 1682,

     1683,  743, 1683, 1684,  742, 1684, 1685,  741, 1685, 1686,
      740, 1686, 1687,  739, 1687,  738,  737,  736,  735,  734,
      729,  727,  726,  725,  723,  722,  721,  720,  718,  717,
      716,  715,  714,  713,  712,  711,  707,  705,  704,  703,
      702,  701,  700,  699,  698,  695,  694,  693,  692,  691,
      690,  689,  688,  687,  686,  685,  684,  682,  681,  680,
      679,  677,  676,  675,  674,  673,  672,  671,  670,  669,
      668,  667,  666,  665,  664,  663,  662,  661,  660,  659,
      658,  657,  656,  655,  653,  652,  651,  650,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  640,  639,  638,

      637,  636,  635,  634,  633,  632,  630,  628,  626,  625,
      619,  617,  615,  611,  609,  608,  607,  606,  603,  602,
      601,  600,  598,  597,  596,  595,  592,  591,  590,  589,
      588,  587,  586,  585,  584,  582,  578,  577,  575,  574,
      570,  568,  564,  562,  561,  560,  559,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  547,  546,  543,  542,
      536,  534,  533,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,

      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  478,  477,  475,  474,  473,  472,
      471,  468,  467,  465,  464,  463,  461,  460,  458,  457,
      456,  455,  454,  453,  451,  450,  449,  447,  445,  444,
      442,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  423,  421,  419,
      418,  416,  415,  414,  413,  412,  408,  406,  405,  402,
      401,  400,  399,  398,  397,  396,  394,  392,  391,  390,
      389,  388,  387,  384,  383,  381,  380,  378,  377,  375,
      373,  371,  370,  369,  368,  367,  365,  364,  363,  362,

      351,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  335,  334,  333,  332,  331,  330,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  317,  315,
      313,  312,  310,  309,  308,  307,  306,  304,  303,  302,
      301,  300,  299,  298,  297,  294,  293,  290,  289,  286,
      285,  282,  278,  277,  276,  275,  274,  273,  272,  270,
      269,  268,  267,  266,  264,  261,  260,  259,  258,  257,
      256,  255,  254,  253,  251,  248,  247,  246,  245,  244,
      243,  242,  240,  239,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  229,  228,  225,  223,  222,  221,  220,

      218,  217,  216,  215,  213,  212,  211,  210,  209,  208,
      199,  198,  197,  196,  194,  193,  191,  186,  185,  184,
      182,  181,  179,  178,  177,  175,  174,  173,  170,  169,
      167,  166,  165,  164,  163,  161,  160,  159,  158,  156,
      153,  149,  148,  146,  144,  143,  141,  140,  139,  138,
      137,  136,  135,  133,  130,  126,  125,  124,  123,  122,
      120,  119,  118,  115,  114,  113,  112,  111,  110,  109,
      108,  107,  106,  105,  104,  103,  102,  101,   99,   95,
       78,   77,   76,   73,   62,   60,   53,   52,   48,   41,
       38,   36,   35,   34,   31,   29,   28,   27,   25,   22,

       14,   10,    7,    3, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1670, 1670, 1670

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[346] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "Flex\\ScannerHLSL.l"
#define YY_NO_UNISTD_H 1
/* HLSL scanner */
#line 11 "Flex\\ScannerHLSL.l"
#line 1451 "Source\\SavvyScannerHLSL.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 25 "Flex\\ScannerHLSL.l"


#line 1554 "Source\\SavvyScannerHLSL.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1671 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1905 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "Flex\\ScannerHLSL.l"
/* eat up comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 "Flex\\ScannerHLSL.l"
{ int c1 = 0, c2 = yyinput();
       for(;;) {
         if(c2 == EOF) break;
         if(c1 == '*' && c2 == '/')
           break;
         c1 = c2;
         c2 = yyinput();
       }
     }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 39 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_INCLUDE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 40 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 41 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 42 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 43 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 44 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 45 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 46 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 47 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 48 "Flex\\ScannerHLSL.l"
/* eat up line */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 49 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 50 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_PREPROCESSOR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 52 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BOOL_VALUE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 53 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BOOL_VALUE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 54 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 55 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 56 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 57 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 58 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 59 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 60 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 61 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 62 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 63 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 64 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 65 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 66 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 67 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 68 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 69 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 70 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 71 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 72 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 73 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 74 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 75 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 82 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 83 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 84 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 86 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 87 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 88 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 90 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 91 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 92 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 94 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 95 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 96 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 98 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 99 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 100 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 102 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 103 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 104 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 106 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 107 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 108 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 110 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 111 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 112 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 114 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 115 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 116 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 118 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 119 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 120 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 122 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 124 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 125 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 126 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 127 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 128 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 129 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 131 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 132 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 133 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 134 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 135 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 136 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 137 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 139 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 140 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 142 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 143 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 144 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 145 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 146 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 147 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 148 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 149 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 150 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 151 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 152 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 153 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 154 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 155 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 156 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 157 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 158 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 159 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 160 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 161 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 162 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 163 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 164 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 165 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 166 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 168 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 169 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 170 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 171 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 172 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 173 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 174 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_INSTRUCTION_END;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 175 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 176 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 177 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 178 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 179 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 180 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPEN_BRACKET;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 181 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CLOSE_BRACKET;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 182 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPEN_BRACE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 183 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CLOSE_BRACE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 184 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPEN_SQUARE_BRACKET;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 185 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CLOSE_SQUARE_BRACKET;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 186 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_IF_STATEMENT;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 187 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_ELSE_STATEMENT;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 188 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_SWITCH_STATEMENT;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 189 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BREAK_STATEMENT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 190 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CASE_STATEMENT;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 191 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FOR_STATEMENT;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 192 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DO_STATEMENT;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 193 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_WHILE_STATEMENT;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 194 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CONTINUE_STATEMENT;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 196 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 197 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 198 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 199 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 200 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 201 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 202 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 203 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 204 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 205 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 206 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 207 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 208 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 209 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 210 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 211 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 212 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 213 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 214 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 215 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 216 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 217 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 218 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 219 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 220 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 221 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 222 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 223 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 224 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 225 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 226 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 227 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 228 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 229 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 230 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 231 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 232 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 233 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 234 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 235 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 236 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 237 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 238 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 239 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 240 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 241 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 242 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 243 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 244 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 245 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 246 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 247 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 248 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 249 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 250 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 251 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 252 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 253 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 254 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 255 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 256 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 257 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 258 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 259 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 260 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 261 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 262 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 263 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 264 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 265 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 266 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 267 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 268 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 269 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 270 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 271 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 272 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 273 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 274 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 275 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 276 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 277 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 278 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 279 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 280 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 281 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 282 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 283 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 284 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 285 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 286 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 287 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 288 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 289 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 290 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 291 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 292 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 293 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 294 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 295 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 296 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 297 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 298 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 299 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 300 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 301 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 302 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 303 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 304 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 305 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 306 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 307 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 308 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 309 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 310 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 311 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 312 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 313 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 314 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 315 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 316 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 317 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 318 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 319 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 320 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 321 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 322 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 323 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 324 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 325 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 326 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 327 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 328 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 329 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 331 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_RETURN_KEYWORD;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 333 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 334 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 335 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 336 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 337 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 338 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 339 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 340 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 341 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 342 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 343 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 344 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 345 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 346 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 347 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 348 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 349 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 350 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 351 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 352 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 353 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 354 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 355 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 356 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 357 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 358 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 359 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 360 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 361 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 362 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 363 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 364 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 365 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 366 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 367 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 368 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 369 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 370 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 371 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 372 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 373 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 374 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 375 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 376 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 377 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 378 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 379 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 380 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 381 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 382 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 383 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 384 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 385 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 386 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 387 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 389 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_IDENTIFIER;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 390 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 391 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 392 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 393 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 394 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 395 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 396 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 397 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 398 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_STRING;
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 399 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_NEW_LINE;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 400 "Flex\\ScannerHLSL.l"
/* eat up whitespace */
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 401 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_UNKNOWN_TOKEN;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 402 "Flex\\ScannerHLSL.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3382 "Source\\SavvyScannerHLSL.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	hlslfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	hlslfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hlslrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hlslrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1671 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1671 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1670);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hlslalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hlslalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hlslfree((void *) b->yy_ch_buf  );

	hlslfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)hlslalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)hlslrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) hlslalloc(new_size  );

		else
			(yy_start_stack) = (int *) hlslrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hlslalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *hlslrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hlslfree (void * ptr )
{
	free( (char *) ptr );	/* see hlslrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 402 "Flex\\ScannerHLSL.l"


