#line 2 "Source\\SavvyScannerHLSL.cpp"

#line 4 "Source\\SavvyScannerHLSL.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer hlslFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *hlslalloc (yy_size_t  );
void *hlslrealloc (void *,yy_size_t  );
void hlslfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include"SavvyScannerHLSL.h"

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 334
#define YY_END_OF_BUFFER 335
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1610] =
    {   0,
        0,    0,  335,  333,  332,  331,   77,  333,  333,  106,
      103,  116,  117,  114,  111,  108,  112,  107,  115,  322,
      322,  109,  110,  105,  113,  104,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  120,  121,
      333,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      118,  100,  119,   99,  332,   79,    0,  330,    0,    3,
        3,    3,   84,   93,   85,   91,   80,   82,   81,   83,
       87,    2,    0,   92,  324,  322,  328,   90,  102,   95,
       78,   94,  101,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,   98,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  128,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  122,   24,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
       86,    0,  330,    0,    1,  324,    0,  323,  328,  329,
       97,   96,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  133,  321,
      135,  138,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  150,  321,  321,  155,
      158,  321,  321,  321,  166,  321,  167,  321,  321,  321,
      172,  321,  321,  321,  321,  321,  321,  180,  321,  127,
      321,  321,  321,  321,  321,    8,  321,  321,  321,  321,
      321,  321,  321,  204,  205,  208,  321,  209,  210,  321,
      321,  213,  321,  321,  321,   25,  216,  321,  321,  229,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  237,
      321,  321,  321,  321,  321,  321,  321,  243,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,    0,    0,
      327,  329,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  131,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  134,  321,
      321,  141,  321,  144,    7,  321,  126,  321,  146,  321,
      321,  149,  321,  321,  151,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  123,  321,  173,  321,  321,
      321,  321,  321,  321,  321,  181,  182,  321,  321,   13,
      321,   32,   33,   34,  321,  321,  321,  321,  321,  203,
      321,  321,  207,  321,  321,  321,  211,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  236,  321,  239,  321,  321,  241,  321,
      242,  321,  321,  321,  244,  321,  321,  321,  321,  321,
      321,    4,  321,  321,    9,  321,  321,  321,   76,  321,
      326,  325,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  132,  321,  321,  142,  321,  145,   38,

       39,   40,  125,  321,  321,  148,   19,  321,  321,  153,
      321,  321,  321,  321,  321,  321,  321,  321,  321,   12,
      321,  321,  321,  321,    5,  321,   10,  179,  183,  321,
       26,  321,  199,  200,  201,  321,  321,  206,  321,   21,
       22,   23,  212,  321,  214,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  233,  234,  321,  321,  321,  321,
      266,  321,  321,  321,  321,  245,  250,  255,  321,  321,
      321,  263,  321,   35,   36,   37,  321,  267,  321,  129,
      321,   75,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  273,  321,
      321,  321,  321,  143,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,   11,  168,  321,  321,
      321,  321,   28,   29,   30,  321,  184,  321,  202,  269,
       44,  321,  321,  321,  321,  321,  321,  321,  321,  217,
      321,  321,  321,  321,  265,  321,  321,  321,  238,  321,
       20,    6,   62,  124,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,   31,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  140,   73,  321,  321,  321,  321,  321,  321,
      321,  161,  321,  320,  321,   41,   42,   43,  321,  321,
      321,  321,  321,  321,  321,   58,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  228,  230,  231,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  257,   63,  321,  268,   27,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  299,  321,  321,  279,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  139,  270,  130,  321,  321,
      157,  321,  160,  321,  165,  321,  321,  321,  174,  175,
      321,  321,   44,   45,   46,   51,   50,   52,   57,   56,
      198,  321,  321,   17,  321,   18,  321,  321,  321,  319,

      321,  321,  321,  321,  235,  321,  321,  321,  248,  321,
      321,  321,  253,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  315,  321,  316,  321,  321,  321,  321,
      321,  321,  321,  321,   64,   65,   67,  321,  152,  321,
      321,  321,   47,   48,   49,   54,   53,   55,   60,   61,
       59,  321,  321,  321,  321,  321,  321,  321,  321,  215,

      321,   69,   70,   71,  321,  246,  247,  249,  251,  252,
      254,  256,  321,  321,  321,  321,  262,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      302,  321,  321,  321,  321,  282,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,    0,  321,    0,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  156,  159,  321,  321,  321,
      321,   15,   14,   16,  321,  321,  321,  240,  321,  321,
      260,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  298,  321,  321,  278,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  295,  321,  275,
      321,  321,  321,  321,  321,    0,  318,  321,    0,  317,
      321,  314,  321,  294,  321,  274,  321,  321,  321,   68,
      162,  176,  321,  178,  321,  321,  232,  258,  259,  261,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,   72,  321,
      321,  177,  321,  321,  321,  321,  321,  321,  321,  264,
      321,  321,  321,  321,  321,  321,  321,  321,  196,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  303,  321,  321,  321,  283,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      311,  291,  321,  321,  321,  321,  321,  272,  321,  321,
      321,  321,  321,  321,  321,  189,  190,  321,  321,  194,
      195,  197,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  307,

      321,  287,  321,  321,  313,  293,  321,  321,  310,  290,
      321,  321,  321,   66,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  305,  285,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  271,
      136,  321,  154,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,    0,    0,    0,    0,  321,  321,  321,
      321,  304,  284,  321,  321,  321,  321,  321,  321,  321,
      321,   74,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,    0,  296,    0,  297,    0,  276,

        0,  277,  321,  301,  321,  281,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      187,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  163,
      321,  321,  321,  321,  321,  321,  193,  321,  321,  321,
      321,  300,  280,  306,  286,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  312,

      292,  321,  147,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      192,  321,  321,  321,  321,  321,  321,  321,  308,  288,
      321,  321,  321,  321,  321,  321,  171,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  225,  226,  227,  321,
      321,  321,  321,  321,  170,  321,  321,  321,  321,  321,
      321,  221,  222,  223,  224,  309,  289,  321,  321,  321,
      185,  321,  321,  191,  321,  321,  321,  321,  321,  169,
      321,  321,  218,  219,  220,  321,  321,  321,  321,  137,

      321,  186,  321,  321,  321,  321,  188,  164,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   22,   22,   22,   24,   25,   26,
       27,   28,    1,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   39,
       54,   55,   56,   57,   58,    1,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[89] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1617] =
    {   0,
        0,    0, 1823, 1824, 1820, 1824, 1794,   84,   84, 1793,
       83, 1824, 1824, 1792,   80, 1824,   81, 1824,   85,   99,
      108, 1794, 1824,   67, 1790,   70, 1746, 1736, 1748,   79,
     1733,    0,   39, 1740, 1738, 1734,   74, 1746, 1824, 1824,
     1781,   76,   27,   96,   98,   62,  123, 1748,   85,  101,
      118, 1733, 1726,   74,  125,  141,  142,   39,   72, 1738,
     1824, 1776, 1824, 1824, 1800, 1824,  162, 1824,  173,    0,
        0,    0, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824, 1824,    0, 1824,  212,  221,  228, 1824, 1774, 1824,
     1824, 1824, 1773,    0, 1729, 1734, 1734, 1763, 1715, 1735,

     1715, 1719, 1713, 1731, 1716, 1730, 1716, 1710, 1703, 1824,
      110, 1711, 1713, 1699,  147, 1722, 1707, 1716, 1701, 1698,
      143,  193,  182, 1703,   22,  142, 1698,  145, 1696, 1700,
     1695, 1695, 1696, 1746, 1749,  119, 1691, 1693,  133, 1689,
      194, 1697, 1693,    0,  185,  198, 1699,  192,   62, 1696,
      204, 1688, 1697, 1699, 1687,  204, 1678, 1674, 1687, 1691,
     1678,  209, 1672, 1675,   80,  207, 1676, 1675, 1671,  218,
     1679, 1673, 1662,  224, 1669, 1670,  154, 1680, 1673, 1672,
     1824,  250,  251,  264,    0,  278,  290, 1824,  303,    0,
     1824, 1824, 1697, 1673, 1675, 1703, 1667, 1663,  281, 1653,

     1668, 1668, 1668,  300, 1654, 1648, 1648, 1649,    0, 1647,
        0,    0, 1650, 1652, 1649, 1653, 1647, 1648, 1658, 1653,
     1651, 1644, 1635, 1641, 1637,  207, 1644, 1637, 1631, 1649,
     1648, 1629, 1641,  256,    0, 1643,    0, 1626, 1638, 1627,
     1680, 1620, 1619, 1633, 1618, 1617,  256,    0, 1631,    0,
     1631, 1609, 1628, 1625, 1609,  271, 1620, 1614, 1626, 1602,
     1618, 1608, 1618,    0,  312,    0, 1604,    0,  298, 1615,
     1616,    0,  216, 1614, 1605,    0,    0, 1603, 1607,    0,
      269, 1606, 1593, 1608, 1598, 1593, 1594, 1588, 1594,  274,
     1592, 1588, 1585, 1584, 1587,  270, 1582, 1593,  333, 1586,

      291, 1594, 1578, 1591, 1578, 1575, 1590, 1581,  338,  349,
      356,    0, 1587, 1586, 1579, 1604, 1585, 1566, 1577, 1580,
     1568, 1565,    0, 1577,  340,  353,  338,  346,  124,  349,
      352,  368,  369,  366, 1569, 1577, 1558, 1558,    0, 1556,
     1561, 1555, 1560, 1612,  386, 1561,    0, 1565,    0, 1552,
     1553,    0, 1548, 1558,    0, 1546, 1546,  333,  348, 1559,
     1545, 1561, 1560, 1548, 1555,    0, 1540,    0, 1542, 1541,
     1549, 1549, 1533, 1532, 1533,    0,    0, 1534, 1529,    0,
     1528,    0,    0,    0, 1533, 1540, 1531, 1528, 1523,    0,
     1541, 1582,    0, 1531,  385, 1578,    0, 1575, 1517, 1531,

     1517, 1533, 1513, 1531, 1526, 1529, 1510, 1510, 1509, 1522,
     1505, 1512, 1505,    0, 1507,    0, 1501, 1507,    0, 1510,
        0, 1504, 1514, 1513,    0, 1540, 1539, 1538, 1521, 1490,
     1491,    0, 1506, 1504,  415, 1492, 1493, 1490,    0, 1499,
      420,  427, 1490, 1484, 1529, 1518, 1494, 1497, 1484, 1482,
     1512, 1482, 1474, 1512, 1499, 1508, 1480, 1466, 1475, 1500,
     1496, 1501, 1467, 1463, 1468, 1495, 1499, 1463, 1488, 1499,
     1456, 1497, 1483, 1452, 1482, 1490, 1450, 1459, 1483, 1452,
     1482, 1451, 1475, 1473, 1443, 1441, 1471, 1482, 1439, 1451,
     1450, 1434, 1435,    0, 1450, 1450,    0, 1430,    0,    0,

        0,    0,    0, 1444, 1433,    0,    0, 1433, 1444,    0,
     1430, 1435, 1428, 1433, 1436, 1427, 1421, 1424, 1432,    0,
     1430, 1429, 1428, 1418,    0, 1430,  432,    0,    0, 1423,
        0, 1421,    0,    0,    0, 1421, 1410,    0, 1403, 1420,
      357,  390,    0, 1420,    0, 1405, 1411, 1416, 1407, 1417,
     1416, 1398, 1403, 1397,    0,    0, 1410, 1413, 1394, 1404,
        0, 1408, 1403, 1389, 1400,  395,  396, 1391, 1433, 1387,
     1388,    0, 1398,    0,    0,    0, 1384,    0, 1383,    0,
     1385,    0, 1396, 1413, 1414, 1376, 1390, 1390, 1388, 1377,
     1372, 1404, 1413, 1406, 1371, 1381, 1373, 1394, 1397, 1410,

     1361, 1364, 1378, 1387,  359, 1356, 1396, 1387, 1365, 1355,
     1386, 1355, 1390, 1386, 1359, 1354, 1391, 1361, 1378, 1347,
     1384, 1372, 1353, 1340, 1368, 1364, 1336, 1332,  288, 1333,
     1348, 1340, 1331,    0, 1332, 1340, 1327, 1338, 1345, 1331,
     1343, 1329, 1323, 1332, 1336, 1336,  443,    0, 1376, 1377,
     1318, 1326, 1310, 1309, 1308, 1369,    0, 1310,    0,    0,
        0, 1317, 1316, 1313, 1314, 1311, 1306, 1307, 1313,    0,
     1302, 1300, 1299, 1313,    0, 1312, 1298, 1295,    0, 1295,
        0,    0,    0,    0, 1304, 1294, 1296, 1292, 1300, 1290,
     1292, 1288, 1287, 1328, 1298, 1287, 1295, 1287,    0, 1281,

     1295, 1309, 1291, 1290, 1280, 1288, 1279, 1288,  439, 1315,
     1301, 1313, 1312, 1268, 1310, 1305, 1311, 1302, 1273, 1279,
     1270, 1292, 1288, 1257, 1259, 1299, 1288, 1268, 1256, 1279,
     1248, 1278, 1287,   92,  170,  328,  318,  342,  320,  383,
      395,  396,  432,  434,  427,  409,  399,  411,  428,  400,
      460,  418,    0,    0,  420,  420,  407,  410,  425,  413,
      427,    0,  419,    0,  430,  412,  413,  414,  478,  475,
      418,  422,  482,  485,  488,    0,  445,  437,  438,  434,
      440,  437,  442,  454,  434,    0,    0,    0,  443,  460,
      503,  461,  447,  467,  468,  466,  456,  471,  472,  470,

      460,  461,  475,    0,  459,    0,    0,  454,  475,  461,
      470,  512,  466,  468,  473,  478,  515,  473,  472,  476,
      515,  524,  517,  489,  498,  491,    0,  511,  518,    0,
      483,  490,  525,  516,  487,  528,  533,  526,  506,  498,
      523,  494,  536,  527,  510,  500,  533,  504,  547,  519,
      535,  554,  507,  527,  535,  545,  507,  517,  511,  514,
      530,  561,  562,  563,  518,    0,    0,    0,  521,  522,
        0,  523,    0,  542,    0,  583,  586,  589,    0,    0,
      552,  546,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  554,  555,    0,  556,    0,  544,  557,  556,    0,

      553,  588,  589,  590,    0,  561,  548,  564,    0,  559,
      551,  567,    0,  562,  563,  565,  557,  561,  559,  573,
      606,  561,  566,  567,  563,  575,  595,  568,  582,  601,
      574,  589,  582,  603,  615,  605,  576,  589,  578,  624,
      617,  597,  619,  627,  624,  632,  604,  631,  599,  618,
      619,  620,  592,  639,  640,  630,  636,  602,  609,  629,
      630,  641,  642,  627,  650,  629,  623,  647,  640,  649,
      612,  626,  631,  629,    0,  662,    0,  633,    0,  631,
      632,  624,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  621,  631,  626,  622,  623,  624,  634,  627,    0,

      628,    0,    0,    0,  633,    0,    0,    0,    0,    0,
        0,    0,  649,  650,  648,  638,    0,  653,  636,  665,
      639,  638,  644,  659,  636,  658,  642,  652,  661,  676,
      677,  692,  679,  650,  666,  652,  694,  689,  667,  661,
        0,  702,  690,  695,  666,    0,  677,  664,  707,  707,
      680,  709,  702,  673,  705,  698,  677,  670,  721,  693,
      711,  682,  738,  714,  746,  692,  738,  724,  740,  696,
      705,  698,  746,  702,  716,    0,    0,  702,  719,  717,
      702,    0,    0,    0,  725,  718,  709,    0,  710,  726,
        0,  721,  714,  756,  761,  710,  719,  724,  721,  767,

      769,  741,  737,  757,  743,  777,    0,  778,  750,    0,
      752,  765,  782,  767,  755,  783,  784,  787,  759,  759,
      760,  777,  795,  749,  768,  786,  757,    0,  796,    0,
      768,  786,  757,  801,  773,  819, 1824,  800,  827, 1824,
      778,    0,  822,    0,  823,    0,  791,  776,  780,    0,
        0,    0,  791,    0,  780,  779,    0,    0,    0,    0,
      784,  782,  809,  832,  797,  788,  801,  808,  806,  796,
      788,  812,  796,  800,  812,  804,  814,  803,  839,  840,
      812,  813,  849,  857,  822,  830,  838,  861,  858,  830,
      812,  836,  849,  865,  821,  838,  852,  823,  864,  865,

      868,  840,  872,  844,  862,  833,  864,  835,    0,  848,
      854,    0,  847,  852,  849,  847,  870,  860,  860,    0,
      858,  846,  861,  862,  854,  865,  845,  856,    0,  853,
      882,  868,  855,  856,  902,  903,  875,  876,  892,  891,
      864,  863,    0,  909,  905,  906,    0,  883,  911,  913,
      913,  886,  904,  875,  919,  920,  920,  892,  904,  875,
        0,    0,  912,  883,  896,  878,  889,    0,  900,  894,
      931,  890,  888,  890,  893,    0,    0,  896,  905,    0,
        0,    0,  909,  925,  897,  940,  942,  943,  915,  916,
      946,  943,  919,  916,  946,  952,  953,  949,  958,    0,

      930,    0,  947,  918,    0,    0,  944,  915,    0,    0,
      964,  936,  933,    0,  925,  922,  916,  979,  925,  924,
      956,  937,  946,  947,  930,  945,  974,  951,  957,  958,
      959,  960,  985,  973,  958,  945,  986,    0,    0,  987,
      989,  961,  983,  954,  995,  996,  974,  945,  953,    0,
      979,  990,    0,  965,  970,  975,  972,  960,  965,  961,
      962,  981,  980, 1025, 1032, 1039, 1046, 1037, 1029, 1010,
     1001,    0,    0, 1026,  997, 1032, 1033, 1032, 1003, 1042,
     1044,    0, 1016, 1025, 1022, 1056, 1016, 1013, 1027, 1026,
     1057, 1016, 1033, 1018, 1087, 1824, 1094, 1824, 1101, 1824,

     1108, 1824, 1059,    0, 1060,    0, 1056, 1027, 1058, 1059,
     1087, 1058, 1093, 1064, 1059, 1064, 1063, 1062, 1069, 1068,
     1093, 1111, 1083, 1088, 1113, 1071, 1078, 1119, 1120, 1108,
     1079, 1118, 1092, 1130, 1102, 1129, 1101, 1099, 1092, 1116,
     1136, 1110, 1100, 1104, 1090, 1095,    0, 1113, 1116, 1103,
     1101,    0,    0,    0,    0, 1136, 1107, 1127, 1098, 1148,
     1121, 1149, 1123, 1120, 1125, 1130, 1116, 1128, 1114, 1132,
     1121, 1117, 1135, 1121, 1121, 1151, 1122, 1163, 1164, 1151,
     1122, 1129, 1144, 1129, 1136, 1138, 1136, 1179, 1146, 1147,
     1138, 1142, 1138, 1140, 1188, 1181, 1182, 1179, 1150,    0,

        0, 1151,    0, 1159, 1148, 1153, 1165, 1157, 1158, 1196,
     1174, 1171, 1159, 1163, 1207, 1158, 1180, 1207, 1208, 1209,
     1181, 1165, 1209, 1170, 1179, 1188, 1172, 1175, 1177, 1182,
        0, 1178, 1180, 1177, 1199, 1194, 1178, 1189,    0,    0,
     1228, 1200, 1190, 1189, 1194, 1205,    0, 1197, 1203, 1198,
     1207, 1243, 1197, 1210, 1194, 1205,    0,    0,    0, 1226,
     1197, 1233, 1208, 1215,    0, 1205, 1207, 1207, 1224, 1208,
     1230,    0,    0,    0,    0,    0,    0, 1207, 1212, 1230,
        0, 1226, 1220,    0, 1230, 1214, 1226, 1227, 1226,    0,
     1228, 1255,    0,    0,    0, 1242, 1257, 1233, 1223,    0,

     1224,    0, 1236, 1237, 1249, 1250,    0,    0, 1824, 1311,
     1314, 1313, 1317, 1320, 1319, 1321
    } ;

static yyconst flex_int16_t yy_def[1617] =
    {   0,
     1609,    1, 1609, 1609, 1609, 1609, 1609, 1610, 1611, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1609, 1609,
     1609, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1609, 1609, 1609, 1609, 1609, 1609, 1610, 1609, 1613, 1611,
     1611, 1611, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1614, 1609, 1609, 1609, 1615, 1609, 1609, 1609,
     1609, 1609, 1609, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1609,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1609, 1610, 1610, 1613, 1614, 1609, 1609, 1609, 1609, 1616,
     1609, 1609, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1609, 1609,
     1609, 1616, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1609, 1609, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1609, 1612, 1609, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1609, 1609, 1612, 1609, 1609,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1609, 1609, 1609, 1609, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1609, 1609, 1609, 1609, 1609, 1609,

     1609, 1609, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,    0, 1609,
     1609, 1609, 1609, 1609, 1609, 1609
    } ;

static yyconst flex_int16_t yy_nxt[1913] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   22,   23,   24,   25,   26,    4,   27,
       28,   29,   30,   31,   32,   33,   32,   34,   32,   35,
       32,   32,   32,   36,   32,   32,   37,   38,   32,   32,
       32,   32,   32,   39,    4,   40,   41,   32,   42,   43,
       44,   45,   46,   47,   32,   48,   49,   32,   32,   50,
       51,   52,   53,   54,   32,   55,   56,   57,   58,   59,
       60,   32,   32,   32,   61,   62,   63,   64,   68,   71,
       74,   77,   89,   90,   79,   82,   92,   93,   98,  117,

       83,  101,  118,  230,  231,  176,   78,   80,   81,   75,
      177,   84,   72,   85,  102,   86,   86,   86,   86,   86,
       86,   86,   85,  106,   86,   86,   86,   86,   86,   86,
       86,  131,  107,  263,  178,  111,  112,  132,   69,  264,
      134,   99,  135,  133,  179,  113,  158,  114,  144,  159,
      287,  108,  115,  116,  119,  120,  145,  288,  121,  125,
      126,  146,  147,  148,  127,  122,   68,  149,  123,  845,
      128,  124,  473,  150,  129,   67,  151,  183,  130,  244,
       87,  136,  208,  160,  152,  161,  209,  162,  245,  137,
      153,  248,  138,  139,  154,  140,  155,  163,  141,  165,

      172,  164,  474,  142,  173,  249,  232,  166,  213,  222,
      214,  167,  168,  215,  223,  169,   69,  174,  170,  233,
      304,  171,  235,  236,  175,  216,  305,  184,  186,  186,
      186,  186,  186,  186,  186,   85,  846,   86,   86,   86,
       86,   86,   86,   86,  189,  189,  189,  189,  189,  189,
      189,  224,  251,  226,   68,   68,  252,  255,  227,  225,
      228,  257,  256,  261,  258,  266,   67,  262,  183,  259,
      273,  289,  281,  282,  187,  188,  294,  274,  290,  275,
      295,  267,  300,  353,  354,  268,  283,  399,  284,  382,
      383,  384,  400,  296,  186,  186,  186,  186,  186,  186,

      186,  309,  301,  310,   69,   69,  311,  311,  311,  311,
      311,  311,  311,  319,  374,  395,  362,  396,  184,  189,
      189,  189,  189,  189,  189,  189,  320,  748,  375,  392,
      393,  325,  326,  363,  415,  327,  422,  328,  405,  416,
      187,  188,  329,  330,  406,  331,  332,  333,  423,  334,
      426,  427,  428,  432,  441,  441,  441,  441,  441,  441,
      441,  847,  433,  749,  429,  442,  442,  442,  442,  442,
      442,  442,  311,  311,  311,  311,  311,  311,  311,  454,
      848,  849,  455,  466,  467,  479,  460,  469,  456,  850,
      461,  475,  470,  511,  476,  462,  512,  481,  483,  487,

      723,  540,  484,  488,  500,  501,  502,  541,  513,  457,
      430,  514,  458,  468,  480,  463,  851,  471,  459,  464,
      663,  477,  472,  664,  478,  465,  482,  485,  489,  852,
      724,  486,  490,  574,  575,  576,  441,  441,  441,  441,
      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      653,  654,  655,  665,  685,  689,  666,  817,  853,  686,
      690,  766,  767,  768,  687,  691,  854,  855,  688,  692,
      856,  857,  858,  859,  860,  861,  818,  862,  863,  864,
      866,  867,  868,  819,  869,  870,  820,  871,  872,  873,
      874,  865,  875,  876,  877,  878,  879,  880,  881,  882,

      883,  884,  885,  886,  887,  888,  889,  891,  890,  892,
      893,  894,  895,  656,  896,  897,  898,  899,  900,  901,
      902,  903,  904,  905,  906,  907,  908,  909,  910,  911,
      912,  913,  914,  915,  916,  920,  921,  922,  923,  917,
      924,  925,  926,  927,  918,  928,  929,  930,  919,  931,
      932,  933,  934,  935,  936,  937,  938,  939,  940,  941,
      942,  943,  944,  946,  947,  948,  950,  951,  952,  953,
      954,  955,  945,  956,  957,  949,  958,  959,  960,  961,
      962,  963,  964,  965,  966,  967,  968,  969,  970,  971,
      972,  973,  974,  975,  976,  977,  978,  979,  980,  981,

      982,  983,  984,  985,  986,  987,  988,  989,  990,  991,
      992,  993,  995,  996,  997,  994,  998,  999, 1000, 1001,
     1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
     1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
     1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
     1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
     1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1042, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
     1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,

     1083, 1084, 1047, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
     1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
     1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
     1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
     1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
     1132, 1133, 1134, 1135, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1138, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1141,
     1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
     1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
     1162, 1163, 1164, 1137, 1165, 1166, 1167, 1168, 1169, 1175,

     1170, 1140, 1171, 1176, 1177, 1178, 1179, 1180, 1181, 1172,
     1182, 1173, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
     1174, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
     1200, 1201, 1202, 1203, 1204, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1205, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
     1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1226,
     1227, 1229, 1230, 1231, 1137, 1232, 1233, 1224, 1228, 1234,
     1235, 1236, 1140, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
     1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,

     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
     1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
     1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
     1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
     1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,

     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
     1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
     1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1394, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1403,
     1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
     1396, 1414, 1415, 1416, 1417, 1418, 1420, 1398, 1421, 1422,
     1423, 1424, 1425, 1426, 1400, 1427, 1428, 1429, 1430, 1431,

     1432, 1402, 1419, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441,
     1442, 1443, 1396, 1444, 1445, 1447, 1448, 1449, 1450, 1398,
     1451, 1452, 1453, 1454, 1455, 1456, 1400, 1446, 1457, 1458,
     1459, 1460, 1461, 1402, 1462, 1463, 1464, 1465, 1467, 1468,
     1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
     1479, 1480, 1466, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,

     1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
     1508, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1518, 1519,
     1520, 1521, 1509, 1522, 1523, 1524, 1525, 1526, 1517, 1527,
     1528, 1529, 1530, 1531, 1532, 1533, 1534, 1536, 1537, 1539,
     1540, 1541, 1542, 1543, 1544, 1545, 1538, 1535, 1546, 1547,
     1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1557, 1558,
     1559, 1560, 1561, 1562, 1563, 1556, 1564, 1565, 1566, 1567,
     1568, 1569, 1570, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
     1579, 1580, 1581, 1571, 1582, 1583, 1584, 1585, 1586, 1588,
     1589, 1590, 1591, 1592, 1593, 1594, 1587, 1595, 1596, 1597,

     1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
     1608,   67,   67,   67,   70,   94,   70,  182,  182,  182,
      185,  190,  185,  312,  844,  843,  842,  841,  840,  839,
      838,  837,  836,  835,  834,  833,  832,  831,  830,  829,
      828,  827,  826,  825,  824,  823,  822,  821,  816,  815,
      814,  813,  812,  811,  810,  809,  808,  807,  806,  805,
      804,  803,  802,  801,  800,  799,  798,  797,  796,  795,
      794,  793,  792,  791,  790,  789,  788,  787,  786,  785,
      784,  783,  782,  781,  780,  779,  778,  777,  776,  775,
      774,  773,  772,  771,  770,  769,  765,  764,  763,  762,

      761,  760,  759,  758,  757,  756,  755,  754,  753,  752,
      751,  750,  747,  746,  745,  744,  743,  742,  741,  740,
      739,  738,  737,  736,  735,  734,  733,  732,  731,  730,
      729,  728,  727,  726,  725,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  684,  683,  682,  681,  680,
      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,
      669,  668,  667,  662,  661,  660,  659,  658,  657,  652,
      651,  650,  649,  648,  647,  646,  645,  644,  643,  642,

      641,  640,  639,  638,  637,  636,  635,  634,  633,  632,
      631,  630,  629,  628,  627,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      591,  590,  589,  588,  587,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  539,  538,  537,

      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  510,  509,  508,  507,  506,  505,  504,  503,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,
      440,  439,  438,  437,  436,  435,  434,  431,  425,  424,
      421,  420,  419,  418,  417,  414,  413,  412,  411,  410,
      409,  408,  407,  404,  403,  402,  401,  398,  397,  394,
      391,  390,  389,  388,  387,  386,  385,  381,  380,  379,
      378,  377,  376,  373,  372,  371,  370,  369,  368,  367,

      366,  365,  364,  361,  360,  359,  358,  357,  356,  355,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  324,  323,
      322,  321,  318,  317,  316,  315,  314,  313,  308,  307,
      306,  303,  302,  299,  298,  297,  293,  292,  291,  286,
      285,  280,  279,  278,  277,  276,  272,  271,  270,  269,
      265,  260,  254,  253,  250,  247,  246,  243,  242,  241,
      240,  239,  238,  237,  234,  229,  221,  220,  219,  218,
      217,  212,  211,  210,  207,  206,  205,  204,  203,  202,
      201,  200,  199,  198,  197,  196,  195,  194,  193,  192,

      191,   65,  181,  180,  157,  156,  143,  110,  109,  105,
      104,  103,  100,   97,   96,   95,   91,   88,   76,   73,
       66,   65, 1609,    3, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,

     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609
    } ;

static yyconst flex_int16_t yy_chk[1913] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    8,    9,
       11,   15,   24,   24,   17,   19,   26,   26,   30,   43,

       19,   33,   43,  125,  125,   58,   15,   17,   17,   11,
       58,   19,    9,   20,   33,   20,   20,   20,   20,   20,
       20,   20,   21,   37,   21,   21,   21,   21,   21,   21,
       21,   46,   37,  149,   59,   42,   42,   46,    8,  149,
       47,   30,   47,   46,   59,   42,   54,   42,   49,   54,
      165,   37,   42,   42,   44,   44,   49,  165,   44,   45,
       45,   49,   50,   50,   45,   44,   67,   50,   44,  734,
       45,   44,  329,   50,   45,   69,   51,   69,   45,  136,
       20,   47,  111,   55,   51,   55,  111,   55,  136,   47,
       51,  139,   47,   47,   51,   47,   51,   55,   47,   56,

       57,   55,  329,   47,   57,  139,  126,   56,  115,  121,
      115,   56,   56,  115,  121,   56,   67,   57,   56,  126,
      177,   56,  128,  128,   57,  115,  177,   69,   85,   85,
       85,   85,   85,   85,   85,   86,  735,   86,   86,   86,
       86,   86,   86,   86,   87,   87,   87,   87,   87,   87,
       87,  122,  141,  123,  182,  183,  141,  145,  123,  122,
      123,  146,  145,  148,  146,  151,  184,  148,  184,  146,
      156,  166,  162,  162,   85,   85,  170,  156,  166,  156,
      170,  151,  174,  226,  226,  151,  162,  273,  162,  256,
      256,  256,  273,  170,  186,  186,  186,  186,  186,  186,

      186,  187,  174,  187,  182,  183,  187,  187,  187,  187,
      187,  187,  187,  199,  247,  269,  234,  269,  184,  189,
      189,  189,  189,  189,  189,  189,  199,  629,  247,  265,
      265,  204,  204,  234,  290,  204,  296,  204,  281,  290,
      186,  186,  204,  204,  281,  204,  204,  204,  296,  204,
      299,  299,  299,  301,  309,  309,  309,  309,  309,  309,
      309,  736,  301,  629,  299,  310,  310,  310,  310,  310,
      310,  310,  311,  311,  311,  311,  311,  311,  311,  325,
      737,  738,  325,  327,  327,  331,  326,  328,  325,  739,
      326,  330,  328,  358,  330,  326,  358,  332,  333,  334,

      605,  395,  333,  334,  345,  345,  345,  395,  359,  325,
      299,  359,  325,  327,  331,  326,  740,  328,  325,  326,
      541,  330,  328,  541,  330,  326,  332,  333,  334,  741,
      605,  333,  334,  435,  435,  435,  441,  441,  441,  441,
      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      527,  527,  527,  542,  566,  567,  542,  709,  742,  566,
      567,  647,  647,  647,  566,  567,  743,  744,  566,  567,
      745,  746,  747,  748,  749,  750,  709,  751,  751,  751,
      752,  755,  756,  709,  757,  758,  709,  759,  760,  761,
      763,  751,  765,  766,  767,  768,  769,  770,  771,  772,

      773,  773,  773,  774,  774,  774,  775,  777,  775,  778,
      779,  780,  781,  527,  782,  783,  784,  785,  789,  790,
      791,  791,  791,  792,  793,  794,  795,  796,  797,  798,
      799,  800,  801,  802,  803,  805,  808,  809,  810,  803,
      811,  812,  813,  814,  803,  815,  816,  817,  803,  818,
      819,  820,  821,  822,  823,  824,  825,  826,  828,  829,
      831,  832,  833,  834,  835,  836,  837,  838,  839,  840,
      841,  842,  833,  843,  844,  836,  845,  846,  847,  848,
      849,  850,  851,  852,  853,  854,  855,  856,  857,  858,
      859,  860,  861,  862,  863,  864,  865,  869,  870,  872,

      874,  876,  876,  876,  877,  877,  877,  878,  878,  878,
      881,  882,  892,  893,  895,  882,  897,  898,  899,  901,
      902,  903,  904,  906,  907,  908,  910,  911,  912,  914,
      915,  916,  917,  918,  919,  920,  921,  922,  923,  924,
      925,  926,  927,  928,  929,  930,  931,  932,  933,  934,
      935,  936,  937,  938,  939,  940,  941,  942,  943,  944,
      945,  946,  947,  948,  949,  950,  951,  952,  944,  953,
      954,  955,  956,  957,  958,  959,  960,  961,  962,  963,
      964,  965,  966,  967,  968,  969,  970,  971,  972,  973,
      974,  976,  978,  980,  981,  982,  992,  993,  994,  995,

      996,  997,  948,  998,  999, 1001, 1005, 1013, 1014, 1015,
     1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
     1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
     1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1048,
     1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
     1059, 1060, 1061, 1062, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1064, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1066,
     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078,
     1079, 1080, 1081, 1085, 1086, 1087, 1089, 1090, 1092, 1093,
     1094, 1095, 1096, 1063, 1097, 1098, 1099, 1100, 1101, 1102,

     1101, 1065, 1101, 1103, 1104, 1105, 1106, 1108, 1109, 1101,
     1111, 1101, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1101, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129,
     1131, 1132, 1133, 1134, 1135, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1138, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1141, 1143, 1145, 1147, 1148, 1149, 1153, 1155, 1156, 1161,
     1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
     1172, 1173, 1174, 1175, 1136, 1176, 1177, 1169, 1172, 1178,
     1179, 1180, 1139, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
     1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,

     1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
     1208, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
     1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231,
     1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
     1242, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253,
     1254, 1255, 1256, 1257, 1258, 1259, 1260, 1263, 1264, 1265,
     1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1278,
     1279, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
     1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1303,
     1304, 1307, 1308, 1311, 1312, 1313, 1315, 1316, 1317, 1318,

     1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1340,
     1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1351,
     1352, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
     1363, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1368,
     1369, 1370, 1371, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
     1364, 1381, 1383, 1384, 1385, 1386, 1387, 1365, 1388, 1389,
     1390, 1391, 1392, 1393, 1366, 1394, 1403, 1405, 1407, 1408,

     1409, 1367, 1386, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
     1419, 1420, 1395, 1421, 1422, 1423, 1424, 1425, 1426, 1397,
     1427, 1428, 1429, 1430, 1431, 1432, 1399, 1422, 1433, 1434,
     1435, 1436, 1437, 1401, 1438, 1439, 1440, 1441, 1442, 1443,
     1444, 1445, 1446, 1448, 1449, 1450, 1451, 1456, 1457, 1458,
     1459, 1460, 1441, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
     1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,

     1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
     1498, 1499, 1488, 1502, 1504, 1505, 1506, 1507, 1495, 1508,
     1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
     1519, 1520, 1521, 1522, 1523, 1524, 1517, 1515, 1525, 1526,
     1527, 1528, 1529, 1530, 1532, 1533, 1534, 1535, 1536, 1537,
     1538, 1541, 1542, 1543, 1544, 1535, 1545, 1546, 1548, 1549,
     1550, 1551, 1552, 1553, 1554, 1555, 1556, 1560, 1561, 1562,
     1563, 1564, 1566, 1552, 1567, 1568, 1569, 1570, 1571, 1578,
     1579, 1580, 1582, 1583, 1585, 1586, 1571, 1587, 1588, 1589,

     1591, 1592, 1596, 1597, 1598, 1599, 1601, 1603, 1604, 1605,
     1606, 1610, 1610, 1610, 1611, 1612, 1611, 1613, 1613, 1613,
     1614, 1615, 1614, 1616,  733,  732,  731,  730,  729,  728,
      727,  726,  725,  724,  723,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  708,  707,
      706,  705,  704,  703,  702,  701,  700,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  680,  678,  677,  676,  674,  673,  672,  671,  669,
      668,  667,  666,  665,  664,  663,  662,  658,  656,  655,
      654,  653,  652,  651,  650,  649,  646,  645,  644,  643,

      642,  641,  640,  639,  638,  637,  636,  635,  633,  632,
      631,  630,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  604,  603,  602,  601,  600,
      599,  598,  597,  596,  595,  594,  593,  592,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  581,  579,  577,
      573,  571,  570,  569,  568,  565,  564,  563,  562,  560,
      559,  558,  557,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  544,  540,  539,  537,  536,  532,  530,  526,
      524,  523,  522,  521,  519,  518,  517,  516,  515,  514,

      513,  512,  511,  509,  508,  505,  504,  498,  496,  495,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  440,  438,  437,  436,  434,  433,  431,  430,  429,
      428,  427,  426,  424,  423,  422,  420,  418,  417,  415,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  396,  394,  392,  391,

      389,  388,  387,  386,  385,  381,  379,  378,  375,  374,
      373,  372,  371,  370,  369,  367,  365,  364,  363,  362,
      361,  360,  357,  356,  354,  353,  351,  350,  348,  346,
      344,  343,  342,  341,  340,  338,  337,  336,  335,  324,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      308,  307,  306,  305,  304,  303,  302,  300,  298,  297,
      295,  294,  293,  292,  291,  289,  288,  287,  286,  285,
      284,  283,  282,  279,  278,  275,  274,  271,  270,  267,
      263,  262,  261,  260,  259,  258,  257,  255,  254,  253,
      252,  251,  249,  246,  245,  244,  243,  242,  241,  240,

      239,  238,  236,  233,  232,  231,  230,  229,  228,  227,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  210,  208,  207,  206,  205,  203,  202,
      201,  200,  198,  197,  196,  195,  194,  193,  180,  179,
      178,  176,  175,  173,  172,  171,  169,  168,  167,  164,
      163,  161,  160,  159,  158,  157,  155,  154,  153,  152,
      150,  147,  143,  142,  140,  138,  137,  135,  134,  133,
      132,  131,  130,  129,  127,  124,  120,  119,  118,  117,
      116,  114,  113,  112,  109,  108,  107,  106,  105,  104,
      103,  102,  101,  100,   99,   98,   97,   96,   95,   93,

       89,   65,   62,   60,   53,   52,   48,   41,   38,   36,
       35,   34,   31,   29,   28,   27,   25,   22,   14,   10,
        7,    5,    3, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,

     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[335] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "Flex\\ScannerHLSL.l"
#define YY_NO_UNISTD_H 1
/* HLSL scanner */
#line 11 "Flex\\ScannerHLSL.l"
#line 1412 "Source\\SavvyScannerHLSL.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 25 "Flex\\ScannerHLSL.l"


#line 1515 "Source\\SavvyScannerHLSL.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1610 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1824 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "Flex\\ScannerHLSL.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 29 "Flex\\ScannerHLSL.l"
{ int c1 = 0, c2 = yyinput();
       for(;;) {
         if(c2 == EOF) break;
         if(c1 == '*' && c2 == '/')
           break;
         c1 = c2;
         c2 = yyinput();
       }
     }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 39 "Flex\\ScannerHLSL.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 41 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BOOL_VALUE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 42 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BOOL_VALUE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 43 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 44 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 45 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 46 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 47 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 48 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 49 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 50 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 51 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 52 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 53 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 54 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 55 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 56 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 57 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 58 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 59 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 60 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 61 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 62 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 63 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 64 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 66 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 71 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 72 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 73 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 75 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 76 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 77 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 79 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 80 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 81 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 83 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 84 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 85 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 87 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 88 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 89 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 91 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 92 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 93 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 99 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 100 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 101 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 103 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 104 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 105 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 107 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 108 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 109 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 111 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 113 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 114 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 115 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 116 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 117 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 118 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 120 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 121 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 122 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 123 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 124 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 125 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 126 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DATA_TYPE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 134 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 135 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 136 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 137 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 138 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 139 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 140 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 141 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 142 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 143 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 144 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 145 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 146 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 147 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 148 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 149 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 150 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 151 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 152 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 153 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 154 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 155 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 159 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 160 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 163 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_INSTRUCTION_END;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 164 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 165 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 166 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 167 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 168 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPERATOR;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 169 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPEN_BRACKET;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 170 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CLOSE_BRACKET;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 171 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPEN_BRACE;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 172 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CLOSE_BRACE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 173 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_OPEN_SQUARE_BRACKET;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 174 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CLOSE_SQUARE_BRACKET;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 175 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_IF_STATEMENT;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 176 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_ELSE_STATEMENT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 177 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_SWITCH_STATEMENT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 178 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BREAK_STATEMENT;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 179 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CASE_STATEMENT;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 180 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FOR_STATEMENT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 181 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_DO_STATEMENT;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 182 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_WHILE_STATEMENT;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 183 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_CONTINUE_STATEMENT;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 191 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 192 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 193 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 194 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 195 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 196 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 197 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 198 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 199 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 200 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 201 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 202 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 203 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 204 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 205 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 206 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 207 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 208 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 209 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 210 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 211 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 212 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 213 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 214 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 215 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 216 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 217 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 218 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 219 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 220 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 221 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 222 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 223 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 224 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 225 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 226 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 227 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 228 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 229 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 230 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 231 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 232 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 233 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 234 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 235 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 236 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 237 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 238 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 239 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 240 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 241 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 242 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 243 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 244 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 245 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 246 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 247 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 248 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 249 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 250 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 251 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 252 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 253 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 254 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 255 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 256 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 257 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 258 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 259 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 260 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 261 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 262 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 263 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 264 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 265 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 266 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 267 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 268 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 269 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 270 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 271 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 272 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 273 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 274 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 275 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 276 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 277 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 278 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 279 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 280 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 281 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 282 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 283 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 284 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 285 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 286 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 287 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 288 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 289 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 290 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 291 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 292 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 293 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 294 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 295 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 296 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 297 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 298 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 299 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 300 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 301 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 302 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 303 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 304 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 305 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 306 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 307 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 308 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 309 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 310 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 311 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 312 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 313 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 314 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 315 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 316 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 317 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 318 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_BUILT_IN_FUNCTION;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 320 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_RETURN_KEYWORD;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 322 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 323 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 324 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 325 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 326 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 327 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 328 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 329 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 330 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 331 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 332 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 333 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 334 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 335 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 336 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 337 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 338 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 339 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 340 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 341 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 342 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 343 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 344 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 345 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 346 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 347 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 348 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 349 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 350 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 351 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 352 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 353 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 354 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 355 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 356 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 357 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 358 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 359 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 360 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 361 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 362 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 363 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 364 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 365 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 366 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 367 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 368 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 369 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 370 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 371 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 372 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 373 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 374 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 375 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 376 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_LANGUAGE_SPECIFIC_KEYWORD;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 378 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_IDENTIFIER;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 379 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 380 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 381 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 382 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 383 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 384 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_FLOAT_VALUE;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 385 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 386 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_INTEGER_VALUE;
	YY_BREAK
case 330:
/* rule 330 can match eol */
YY_RULE_SETUP
#line 387 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_STRING;
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 388 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_NEW_LINE;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 389 "Flex\\ScannerHLSL.l"

	YY_BREAK
case 333:
YY_RULE_SETUP
#line 390 "Flex\\ScannerHLSL.l"
return Savvy::SAVVY_UNKNOWN_TOKEN;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 391 "Flex\\ScannerHLSL.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3288 "Source\\SavvyScannerHLSL.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	hlslfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	hlslfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hlslrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hlslrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1610 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1610 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1609);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hlslalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hlslalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hlslfree((void *) b->yy_ch_buf  );

	hlslfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)hlslalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)hlslrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) hlslalloc(new_size  );

		else
			(yy_start_stack) = (int *) hlslrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hlslalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *hlslrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hlslfree (void * ptr )
{
	free( (char *) ptr );	/* see hlslrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 391 "Flex\\ScannerHLSL.l"


